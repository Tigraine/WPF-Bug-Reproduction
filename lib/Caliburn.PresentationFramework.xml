<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Caliburn.PresentationFramework</name>
    </assembly>
    <members>
        <member name="T:Caliburn.PresentationFramework.Actions.Action">
            <summary>
            A host for action related attached properties.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Actions.Action.TargetProperty">
            <summary>
            A property definition representing the target of an action message.  The DataContext of the element will be set to this instance.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Actions.Action.TargetWithoutContextProperty">
            <summary>
            A property definition representing the target of an action message.  The DataContext of the element is not set to this instance and the instances view metadata is not set.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.Action.Initialize(Caliburn.PresentationFramework.IRoutedMessageController,Caliburn.PresentationFramework.ViewModels.IViewModelDescriptionFactory,Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            Initializes property host.
            </summary>
            <param name="controller">The controller.</param>
            <param name="viewModelDescriptionFactory"></param>
            <param name="serviceLocator">The service locator.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.Action.SetTarget(System.Windows.DependencyObject,System.Object)">
            <summary>
            Sets the target.
            </summary>
            <param name="d">The d.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.Action.GetTarget(System.Windows.DependencyObject)">
            <summary>
            Gets the target.
            </summary>
            <param name="d">The d.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.Action.SetTargetWithoutContext(System.Windows.DependencyObject,System.Object)">
            <summary>
            Sets the target.
            </summary>
            <param name="d">The d.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.Action.GetTargetWithoutContext(System.Windows.DependencyObject)">
            <summary>
            Gets the target.
            </summary>
            <param name="d">The d.</param>
            <returns></returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.Actions.ActionAttribute">
            <summary>
            Designates an <see cref="T:Caliburn.PresentationFramework.Actions.IAction"/>.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Actions.IActionFactory">
            <summary>
            A service responsible for creating an <see cref="T:Caliburn.PresentationFramework.Actions.IAction"/>.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.IActionFactory.Create(Caliburn.PresentationFramework.Actions.ActionCreationContext)">
            <summary>
            Creates an <see cref="T:Caliburn.PresentationFramework.Actions.IAction"/> using the specified context.
            </summary>
            <param name="context">The context.</param>
            <returns>The <see cref="T:Caliburn.PresentationFramework.Actions.IAction"/>.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionAttribute.Create(Caliburn.PresentationFramework.Actions.ActionCreationContext)">
            <summary>
            Creates an <see cref="T:Caliburn.PresentationFramework.Actions.IAction"/> using the specified context.
            </summary>
            <param name="context">The context.</param>
            <returns>The <see cref="T:Caliburn.PresentationFramework.Actions.IAction"/>.</returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.ActionAttribute.BlockInteraction">
            <summary>
            Gets or sets a value indicating whether to block interaction with the trigger during asynchronous execution.
            </summary>
            <value><c>true</c> if should block; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Actions.ActionBase">
            <summary>
            A base implementation of <see cref="T:Caliburn.PresentationFramework.Actions.IAction"/>.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Actions.IAction">
            <summary>
            Represents a single action.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.IAction.Matches(Caliburn.PresentationFramework.Actions.ActionMessage)">
            <summary>
            Determines whether this action matches the specified message.
            </summary>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.IAction.ShouldTriggerBeAvailable(Caliburn.PresentationFramework.Actions.ActionMessage,Caliburn.PresentationFramework.IInteractionNode)">
            <summary>
            Determines how this instance affects trigger availability.
            </summary>
            <param name="actionMessage">The action message.</param>
            <param name="handlingNode">The node.</param>
            <returns>
            	<c>true</c> if this instance enables triggers; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.IAction.Execute(Caliburn.PresentationFramework.Actions.ActionMessage,Caliburn.PresentationFramework.IInteractionNode,System.Object)">
            <summary>
            Executes the specified action on the specified target.
            </summary>
            <param name="actionMessage">The action message.</param>
            <param name="handlingNode">The node.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.IAction.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.IAction.Requirements">
            <summary>
            Gets the requirements.
            </summary>
            <value>The requirements.</value>
        </member>
        <member name="E:Caliburn.PresentationFramework.Actions.IAction.Completed">
            <summary>
            Occurs when action has completed.
            </summary>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.IAction.Filters">
            <summary>
            Gets the filters.
            </summary>
            <value>The filters.</value>
        </member>
        <member name="F:Caliburn.PresentationFramework.Actions.ActionBase._method">
            <summary>
            The method.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Actions.ActionBase._messageBinder">
            <summary>
            The binder.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Actions.ActionBase._filters">
            <summary>
            The filters.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Actions.ActionBase._requirements">
            <summary>
            The required parameters.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionBase.#ctor(Caliburn.Core.Invocation.IMethod,Caliburn.PresentationFramework.IMessageBinder,Caliburn.PresentationFramework.Filters.IFilterManager,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Actions.ActionBase"/> class.
            </summary>
            <param name="method">The method.</param>
            <param name="messageBinder">The method binder.</param>
            <param name="filters">The filters.</param>
            <param name="blockInteraction">if set to <c>true</c> blocks interaction.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionBase.Matches(Caliburn.PresentationFramework.Actions.ActionMessage)">
            <summary>
            Determines whether this action matches the specified message.
            </summary>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionBase.ShouldTriggerBeAvailable(Caliburn.PresentationFramework.Actions.ActionMessage,Caliburn.PresentationFramework.IInteractionNode)">
            <summary>
            Determines how this instance affects trigger availability.
            </summary>
            <param name="actionMessage">The action message.</param>
            <param name="handlingNode">The node.</param>
            <returns>
            	<c>true</c> if this instance enables triggers; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionBase.Execute(Caliburn.PresentationFramework.Actions.ActionMessage,Caliburn.PresentationFramework.IInteractionNode,System.Object)">
            <summary>
            Executes the specified this action on the specified target.
            </summary>
            <param name="actionMessage">The action message.</param>
            <param name="handlingNode">The node.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionBase.TryApplyRescue(Caliburn.PresentationFramework.IRoutedMessage,Caliburn.PresentationFramework.IInteractionNode,System.Exception)">
            <summary>
            Applies the rescue or fails.
            </summary>
            <param name="message">The action message.</param>
            <param name="handlingNode">The handling node.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionBase.OnCompleted">
            <summary>
            Called when completed event needs to fire.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionBase.TryUpdateTrigger(Caliburn.PresentationFramework.Actions.ActionMessage,Caliburn.PresentationFramework.IInteractionNode,System.Boolean)">
            <summary>
            Tries to update trigger.
            </summary>
            <param name="actionMessage">The action message.</param>
            <param name="handlingNode">The handling node.</param>
            <param name="forceDisabled">if set to <c>true</c> [force disabled].</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.ActionBase.BlockInteraction">
            <summary>
            Gets a value indicating whether to block intaction with the trigger during async execution.
            </summary>
            <value><c>true</c> if should block; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.ActionBase.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.ActionBase.Requirements">
            <summary>
            Gets the requirements.
            </summary>
            <value>The requirements.</value>
        </member>
        <member name="E:Caliburn.PresentationFramework.Actions.ActionBase.Completed">
            <summary>
            Occurs when action has completed.
            </summary>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.ActionBase.Filters">
            <summary>
            Gets the filters.
            </summary>
            <value>The filters.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.ActionBase.Method">
            <summary>
            Gets the method.
            </summary>
            <value>The method.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Actions.ActionCreationContext">
            <summary>
            Provides services and information during creation of an <see cref="T:Caliburn.PresentationFramework.Actions.IAction"/>.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionCreationContext.#ctor(Microsoft.Practices.ServiceLocation.IServiceLocator,Caliburn.Core.Invocation.IMethodFactory,Caliburn.PresentationFramework.IMessageBinder,Caliburn.PresentationFramework.Conventions.IConventionManager,System.Type,Caliburn.PresentationFramework.Filters.IFilterManager,System.Reflection.MethodInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Actions.ActionCreationContext"/> class.
            </summary>
            <param name="serviceLocator">The service locator.</param>
            <param name="methodFactory">The method factory.</param>
            <param name="messageBinder">The message binder.</param>
            <param name="conventionManager">The convention manager</param>
            <param name="targetType">Type of the target.</param>
            <param name="targetFilters">The target filters.</param>
            <param name="method">The method.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.ActionCreationContext.TargetType">
            <summary>
            Gets or sets the type of the target.
            </summary>
            <value>The type of the target.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.ActionCreationContext.TargetFilters">
            <summary>
            Gets or sets the target filters.
            </summary>
            <value>The target filters.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.ActionCreationContext.Method">
            <summary>
            Gets or sets the method.
            </summary>
            <value>The method.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.ActionCreationContext.ServiceLocator">
            <summary>
            Gets or sets the service locator.
            </summary>
            <value>The service locator.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.ActionCreationContext.MethodFactory">
            <summary>
            Gets or sets the method factory.
            </summary>
            <value>The method factory.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.ActionCreationContext.MessageBinder">
            <summary>
            Gets or sets the message binder.
            </summary>
            <value>The message binder.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.ActionCreationContext.ConventionManager">
            <summary>
            Gets or sets the convention manager.
            </summary>
            <value>The convention manager.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Actions.ActionExtensions">
            <summary>
            Hosts extension methods related to actions.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionExtensions.HasTriggerEffects(Caliburn.PresentationFramework.Actions.IAction)">
            <summary>
            Determines whether the action has trigger effects.
            </summary>
            <param name="action">The action.</param>
            <returns>
            	<c>true</c> if has trigger effects; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionExtensions.CreateFilterManager(Caliburn.PresentationFramework.Actions.ActionCreationContext,Caliburn.Core.Invocation.IMethod)">
            <summary>
            Creates the filter manager for the method based on the context.
            </summary>
            <param name="context">The context.</param>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.Actions.ActionLocationContext">
            <summary>
            Provides services and information for locating instances of <see cref="T:Caliburn.PresentationFramework.Actions.IAction"/>.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionLocationContext.#ctor(Microsoft.Practices.ServiceLocation.IServiceLocator,System.Type,Caliburn.PresentationFramework.Filters.IFilterManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Actions.ActionLocationContext"/> class.
            </summary>
            <param name="serviceLocator">The service locator.</param>
            <param name="targetType">Type of the target.</param>
            <param name="targetFilters">The target filters.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.ActionLocationContext.TargetType">
            <summary>
            Gets or sets the type of the target.
            </summary>
            <value>The type of the target.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.ActionLocationContext.TargetFilters">
            <summary>
            Gets or sets the target filters.
            </summary>
            <value>The target filters.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.ActionLocationContext.ServiceLocator">
            <summary>
            Gets or sets the service locator.
            </summary>
            <value>The service locator.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Actions.ActionMessage">
            <summary>
            An <see cref="T:Caliburn.PresentationFramework.IRoutedMessage"/> for actions.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.IRoutedMessageWithOutcome">
            <summary>
            Allows am <see cref="T:Caliburn.PresentationFramework.IMessageBinder"/> to bind return values.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.IRoutedMessage">
            <summary>
            Instances of this interface can be routed through the interaction hierarchy.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.IRoutedMessage.Initialize(Caliburn.PresentationFramework.IInteractionNode)">
            <summary>
            Initializes the message for interaction with the specified node.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.IRoutedMessage.RelatesTo(System.Object)">
            <summary>
            Indicates whether this message is related to the potential target.
            </summary>
            <param name="potentialTarget">The potential target.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.IRoutedMessage.GetDefaultHandlers(Caliburn.PresentationFramework.IInteractionNode)">
            <summary>
            Gets the default handlers for this type of message.
            </summary>
            <param name="node">The node to get default handlers for.</param>
            <returns></returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.IRoutedMessage.AvailabilityEffect">
            <summary>
            Gets or sets the availability effect.
            </summary>
            <value>The availability effect.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.IRoutedMessage.Source">
            <summary>
            Gets the source of the message.
            </summary>
            <value>The source.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.IRoutedMessage.Parameters">
            <summary>
            Gets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="E:Caliburn.PresentationFramework.IRoutedMessage.Invalidated">
            <summary>
            Occurs when the message is invalidated.
            </summary>
        </member>
        <member name="P:Caliburn.PresentationFramework.IRoutedMessageWithOutcome.OutcomePath">
            <summary>
            Gets or sets the path to use in binding the <see cref="T:Caliburn.PresentationFramework.MessageProcessingOutcome"/>.
            </summary>
            <value>The outcome path.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.IRoutedMessageWithOutcome.DefaultOutcomeElement">
            <summary>
            Gets the default element to bind to if no outcome path is specified.
            </summary>
            <value>The default element.</value>
        </member>
        <member name="F:Caliburn.PresentationFramework.Actions.ActionMessage.ParametersProperty">
            <summary>
            Represents the parameters of an action message.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Actions.ActionMessage.MethodNameProperty">
            <summary>
            Represents the method name of an action message.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Actions.ActionMessage.OutcomePathProperty">
            <summary>
            Represents the return path of an action message.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Actions.ActionMessage.AvailabilityEffectProperty">
            <summary>
            Represents the availability effect of an action message.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Actions.ActionMessage"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionMessage.Initialize(Caliburn.PresentationFramework.IInteractionNode)">
            <summary>
            Initializes the message for interaction with the specified node.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionMessage.RelatesTo(System.Object)">
            <summary>
            Indicates whether this message is related to the potential target.
            </summary>
            <param name="potentialTarget">The potential target.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionMessage.CreateInstanceCore">
            <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:System.Windows.Freezable"/> derived class.
            </summary>
            <returns>The new instance.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionMessage.Equals(Caliburn.PresentationFramework.IRoutedMessage)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionMessage.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionMessage.GetDefaultHandlers(Caliburn.PresentationFramework.IInteractionNode)">
            <summary>
            Gets the default handlers for this type of message.
            </summary>
            <param name="node">The node to get default handlers for.</param>
            <returns></returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.ActionMessage.MethodName">
            <summary>
            Gets or sets the name of the method.
            </summary>
            <value>The name of the method.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.ActionMessage.OutcomePath">
            <summary>
            Gets or sets the path to use in binding the return value.
            </summary>
            <value>The return path.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.ActionMessage.DefaultOutcomeElement">
            <summary>
            Gets the default element to bind to if no return path is specified.
            </summary>
            <value>The default element.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.ActionMessage.AvailabilityEffect">
            <summary>
            Gets or sets the availability effect.
            </summary>
            <value>The availability effect.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.ActionMessage.Parameters">
            <summary>
            Gets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.ActionMessage.Source">
            <summary>
            Gets the source of the message.
            </summary>
            <value>The source.</value>
        </member>
        <member name="E:Caliburn.PresentationFramework.Actions.ActionMessage.Invalidated">
            <summary>
            Occurs when the message is invalidated.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Actions.ActionMessageHandler">
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.IRoutedMessageController"/> for action messages.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.IRoutedMessageHandler">
            <summary>
            Implemented by classes that handler routed messages.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.IRoutedMessageHandler.Initialize(Caliburn.PresentationFramework.IInteractionNode)">
            <summary>
            Initializes this handler on the specified node.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.IRoutedMessageHandler.Unwrap">
            <summary>
            Gets the underlying object instance to which this handler routes requests.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.IRoutedMessageHandler.Handles(Caliburn.PresentationFramework.IRoutedMessage)">
            <summary>
            Indicates whether this instance can handle the speicified message.
            </summary>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.IRoutedMessageHandler.Process(Caliburn.PresentationFramework.IRoutedMessage,System.Object)">
            <summary>
            Processes the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="context">An object that provides additional context for message processing.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.IRoutedMessageHandler.UpdateAvailability(Caliburn.PresentationFramework.IMessageTrigger)">
            <summary>
            Updates the availability of the trigger.
            </summary>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.IRoutedMessageHandler.MakeAwareOf(Caliburn.PresentationFramework.IMessageTrigger)">
            <summary>
            Makes the handler aware of a specific trigger.
            </summary>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionMessageHandler.#ctor(Caliburn.PresentationFramework.Actions.IActionHost,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Actions.ActionMessageHandler"/> class.
            </summary>
            <param name="host">The host.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionMessageHandler.Initialize(Caliburn.PresentationFramework.IInteractionNode)">
            <summary>
            Initializes this handler on the specified node.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionMessageHandler.Unwrap">
            <summary>
            Gets the data context value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionMessageHandler.Handles(Caliburn.PresentationFramework.IRoutedMessage)">
            <summary>
            Determines whethyer the target can handle the specified action.
            </summary>
            <param name="message">The action details.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionMessageHandler.Process(Caliburn.PresentationFramework.IRoutedMessage,System.Object)">
            <summary>
            Processes the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="context">An object that provides additional context for message processing.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionMessageHandler.UpdateAvailability(Caliburn.PresentationFramework.IMessageTrigger)">
            <summary>
            Updates the availability of the trigger.
            </summary>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionMessageHandler.MakeAwareOf(Caliburn.PresentationFramework.IMessageTrigger)">
            <summary>
            Makes the handler aware of a specific trigger.
            </summary>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.ActionMessageHandler.Host">
            <summary>
            Gets the host.
            </summary>
            <value>The host.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Actions.ActionMessageParser">
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.Actions.ActionMessage"/> for <see cref="T:Caliburn.PresentationFramework.Parsers.IMessageParser"/>.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Parsers.MessageParserBase`1">
            <summary>
            An base implementation of <see cref="T:Caliburn.PresentationFramework.Parsers.IMessageParser"/>.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Parsers.IMessageParser">
            <summary>
            Parses an <see cref="T:Caliburn.PresentationFramework.IRoutedMessage"/> from text.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Parsers.IMessageParser.Parse(System.Windows.DependencyObject,System.String)">
            <summary>
            Parses the specified message text.
            </summary>
            <param name="target">The targeted UI element.</param>
            <param name="messageText">The message text.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Parsers.MessageParserBase`1.#ctor(Caliburn.PresentationFramework.Conventions.IConventionManager,Caliburn.PresentationFramework.IMessageBinder)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Parsers.MessageParserBase`1"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Parsers.MessageParserBase`1.#ctor(Caliburn.PresentationFramework.Conventions.IConventionManager,Caliburn.PresentationFramework.IMessageBinder,System.Windows.Data.UpdateSourceTrigger)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Parsers.MessageParserBase`1"/> class.
            </summary>
            <param name="conventionManager">The convention manager.</param>
            <param name="messageBinder">The message binder.</param>
            <param name="defaultTrigger">The default trigger.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Parsers.MessageParserBase`1.Parse(System.Windows.DependencyObject,System.String)">
            <summary>
            Parses the specified message text.
            </summary>
            <param name="target">The targeted UI element.</param>
            <param name="messageText">The message text.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Parsers.MessageParserBase`1.SetCore(`0,System.Windows.DependencyObject,System.String)">
            <summary>
            Sets the core value of the message.
            </summary>
            <param name="message">The message.</param>
            <param name="target">The target.</param>
            <param name="coreOfMessage">The core representation of the message.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Parsers.MessageParserBase`1.ParseHeadAndTail(System.String,`0)">
            <summary>
            Parses the root portion of the message.
            </summary>
            <param name="messageText">The message text.</param>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionMessageParser.#ctor(Caliburn.PresentationFramework.Conventions.IConventionManager,Caliburn.PresentationFramework.IMessageBinder)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Actions.ActionMessageParser"/> class.
            </summary>
            <param name="conventionManager">The convention manager.</param>
            <param name="messageBinder">The message binder.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionMessageParser.#ctor(Caliburn.PresentationFramework.Conventions.IConventionManager,Caliburn.PresentationFramework.IMessageBinder,System.Windows.Data.UpdateSourceTrigger)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Actions.ActionMessageParser"/> class.
            </summary>
            <param name="conventionManager">The convention manager.</param>
            <param name="messageBinder">The message binder.</param>
            <param name="defaultTrigger">The default trigger.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionMessageParser.ParseHeadAndTail(System.String,Caliburn.PresentationFramework.Actions.ActionMessage)">
            <summary>
            Parses the root portion of the message.
            </summary>
            <param name="messageText">The message text.</param>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.ActionMessageParser.SetCore(Caliburn.PresentationFramework.Actions.ActionMessage,System.Windows.DependencyObject,System.String)">
            <summary>
            Sets the core value of the message.
            </summary>
            <param name="message">The message.</param>
            <param name="target">The target.</param>
            <param name="coreOfMessage">The core representation of the message.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.Actions.AsyncActionAttribute">
            <summary>
            Designates an action as asynchronous.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Filters.IInitializable">
            <summary>
            An <see cref="T:Caliburn.PresentationFramework.Filters.IFilter"/> that requires initialization.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Filters.IFilter">
            <summary>
            A filter.
            </summary>
        </member>
        <member name="P:Caliburn.PresentationFramework.Filters.IFilter.Priority">
            <summary>
            Gets the priority used to order filters.
            </summary>
            <remarks>Higher numbers are evaluated first.</remarks>
            <value>The order.</value>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.IInitializable.Initialize(System.Type,Caliburn.Core.Metadata.IMetadataContainer,Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            Initializes the filter.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="metadataContainer">The metadata container.</param>
            <param name="serviceLocator">The serviceLocator.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.Filters.IPostProcessor">
            <summary>
            A filter that is executed after something.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.IPostProcessor.Execute(Caliburn.PresentationFramework.IRoutedMessage,Caliburn.PresentationFramework.IInteractionNode,Caliburn.PresentationFramework.MessageProcessingOutcome)">
            <summary>
            Executes the filter.
            </summary>
            <param name="outcome">The outcome of processing the message</param>
            <param name="message">The message.</param>
            <param name="handlingNode">The handling node.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.AsyncActionAttribute.Initialize(System.Type,Caliburn.Core.Metadata.IMetadataContainer,Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            Initializes the filter.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="metadataContainer">The metadata container.</param>
            <param name="serviceLocator">The service locator.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.AsyncActionAttribute.Execute(Caliburn.PresentationFramework.IRoutedMessage,Caliburn.PresentationFramework.IInteractionNode,Caliburn.PresentationFramework.MessageProcessingOutcome)">
            <summary>
            Executes the filter.
            </summary>
            <param name="message">The message.</param>
            <param name="handlingNode">The handling node.</param>
            <param name="outcome">The outcome of processing the message</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.AsyncActionAttribute.Create(Caliburn.PresentationFramework.Actions.ActionCreationContext)">
            <summary>
            Creates an <see cref="T:Caliburn.PresentationFramework.Actions.IAction"/> using the specified context.
            </summary>
            <param name="context">The context.</param>
            <returns>The <see cref="T:Caliburn.PresentationFramework.Actions.IAction"/>.</returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.AsyncActionAttribute.BlockInteraction">
            <summary>
            Gets or sets a value indicating whether to block interaction with the trigger during asynchronous execution.
            </summary>
            <value><c>true</c> if should block; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.AsyncActionAttribute.Callback">
            <summary>
            Gets or sets the callback method.
            </summary>
            <value>The callback.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.AsyncActionAttribute.Priority">
            <summary>
            Gets the order the filter will be evaluated in.
            </summary>
            <value>The order.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Actions.AsynchronousAction">
            <summary>
            An asynchronous <see cref="T:Caliburn.PresentationFramework.Actions.IAction"/>.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.AsynchronousAction.#ctor(Microsoft.Practices.ServiceLocation.IServiceLocator,Caliburn.Core.Invocation.IMethod,Caliburn.PresentationFramework.IMessageBinder,Caliburn.PresentationFramework.Filters.IFilterManager,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Actions.AsynchronousAction"/> class.
            </summary>
            <param name="serviceLocator">The service locator.</param>
            <param name="method">The method.</param>
            <param name="messageBinder">The method binder.</param>
            <param name="filters">The filters.</param>
            <param name="blockInteraction">if set to <c>true</c> blocks interaction.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.AsynchronousAction.Execute(Caliburn.PresentationFramework.Actions.ActionMessage,Caliburn.PresentationFramework.IInteractionNode,System.Object)">
            <summary>
            Executes the specified this action on the specified target.
            </summary>
            <param name="actionMessage">The action message.</param>
            <param name="handlingNode">The node.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.AsynchronousAction.DoExecute(Caliburn.PresentationFramework.Actions.ActionMessage,Caliburn.PresentationFramework.IInteractionNode,System.Object[])">
            <summary>
            Executes the core logic, specific to the action type.
            </summary>
            <param name="actionMessage">The action message.</param>
            <param name="handlingNode">The node.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.AsynchronousAction.ShouldTriggerBeAvailable(Caliburn.PresentationFramework.Actions.ActionMessage,Caliburn.PresentationFramework.IInteractionNode)">
            <summary>
            Determines how this instance affects trigger availability.
            </summary>
            <param name="actionMessage">The action message.</param>
            <param name="handlingNode">The node.</param>
            <returns>
            	<c>true</c> if this instance enables triggers; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.AsynchronousAction.CurrentTask">
            <summary>
            Gets or sets the current background task.
            </summary>
            <value>The current task.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Actions.DefaultActionLocator">
            <summary>
            The default implementation of <see cref="T:Caliburn.PresentationFramework.Actions.IActionLocator"/>.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Actions.IActionLocator">
            <summary>
            A service responsible for locating actions.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.IActionLocator.Locate(Caliburn.PresentationFramework.Actions.ActionLocationContext)">
            <summary>
            Locates actions using the specified context.
            </summary>
            <param name="context">The context.</param>
            <returns>Discovered actions.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.DefaultActionLocator.#ctor(Microsoft.Practices.ServiceLocation.IServiceLocator,Caliburn.Core.Invocation.IMethodFactory,Caliburn.PresentationFramework.IMessageBinder,Caliburn.PresentationFramework.Conventions.IConventionManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Actions.DefaultActionLocator"/> class.
            </summary>
            <param name="serviceLocator">The service locator.</param>
            <param name="methodFactory">The method factory.</param>
            <param name="messageBinder">The message binder.</param>
            <param name="conventionManager">The convention manager.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.DefaultActionLocator.Locate(Caliburn.PresentationFramework.Actions.ActionLocationContext)">
            <summary>
            Locates actions for the specified context.
            </summary>
            <param name="context">The context.</param>
            <returns>Discovered actions.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.DefaultActionLocator.SelectMethods(System.Type)">
            <summary>
            Selects the methods approprate for actions.
            </summary>
            <param name="targetType">Type of the target.</param>
            <returns>The action appropriate methods.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.DefaultActionLocator.CreateAction(System.Type,Caliburn.PresentationFramework.Filters.IFilterManager,System.Reflection.MethodInfo)">
            <summary>
            Creates the action.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="targetFilters">The target filters.</param>
            <param name="methodInfo">The method info.</param>
            <returns>The action.</returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.Actions.IActionHost">
            <summary>
            Hosts instances of <see cref="T:Caliburn.PresentationFramework.Actions.IAction"/> and related metadata.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.IActionHost.GetAction(Caliburn.PresentationFramework.Actions.ActionMessage)">
            <summary>
            Gets the action.
            </summary>
            <param name="message">The action message.</param>
            <returns></returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.IActionHost.TargetType">
            <summary>
            Gets the type of the target.
            </summary>
            <value>The type of the target.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.IActionHost.Filters">
            <summary>
            Gets the filters.
            </summary>
            <value>The filters.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.IActionHost.Actions">
            <summary>
            Gets the actions.
            </summary>
            <value>The actions.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Actions.OverloadedAction">
            <summary>
            An overloaded <see cref="T:Caliburn.PresentationFramework.Actions.IAction"/>.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.OverloadedAction.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Actions.OverloadedAction"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.OverloadedAction.Matches(Caliburn.PresentationFramework.Actions.ActionMessage)">
            <summary>
            Determines whether this action matches the specified message.
            </summary>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.OverloadedAction.AddOverload(Caliburn.PresentationFramework.Actions.IAction)">
            <summary>
            Adds the overload.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.OverloadedAction.DetermineOverloadOrFail(Caliburn.PresentationFramework.Actions.ActionMessage)">
            <summary>
            Determines the overload or fail.
            </summary>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.OverloadedAction.ShouldTriggerBeAvailable(Caliburn.PresentationFramework.Actions.ActionMessage,Caliburn.PresentationFramework.IInteractionNode)">
            <summary>
            Determines how this instance affects trigger availability.
            </summary>
            <param name="actionMessage">The action message.</param>
            <param name="handlingNode">The node.</param>
            <returns>
            	<c>true</c> if this instance enables triggers; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.OverloadedAction.Execute(Caliburn.PresentationFramework.Actions.ActionMessage,Caliburn.PresentationFramework.IInteractionNode,System.Object)">
            <summary>
            Executes the specified this action on the specified target.
            </summary>
            <param name="actionMessage">The action message.</param>
            <param name="handlingNode">The node.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.OverloadedAction.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.OverloadedAction.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.OverloadedAction.OnCompleted">
            <summary>
            Called when completed event needs to fire.
            </summary>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.OverloadedAction.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.OverloadedAction.Requirements">
            <summary>
            Gets the requirements.
            </summary>
            <value>The requirements.</value>
        </member>
        <member name="E:Caliburn.PresentationFramework.Actions.OverloadedAction.Completed">
            <summary>
            Occurs when action has completed.
            </summary>
        </member>
        <member name="P:Caliburn.PresentationFramework.Actions.OverloadedAction.Filters">
            <summary>
            Gets the filters.
            </summary>
            <value>The filters.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Actions.SynchronousAction">
            <summary>
            A synchronous <see cref="T:Caliburn.PresentationFramework.Actions.IAction"/>.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.SynchronousAction.#ctor(Microsoft.Practices.ServiceLocation.IServiceLocator,Caliburn.Core.Invocation.IMethod,Caliburn.PresentationFramework.IMessageBinder,Caliburn.PresentationFramework.Filters.IFilterManager,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Actions.SynchronousAction"/> class.
            </summary>
            <param name="serviceLocator">The service locator.</param>
            <param name="method">The method.</param>
            <param name="messageBinder">The method binder.</param>
            <param name="filters">The filters.</param>
            <param name="blockInteraction">if set to <c>true</c> blocks interaction.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Actions.SynchronousAction.Execute(Caliburn.PresentationFramework.Actions.ActionMessage,Caliburn.PresentationFramework.IInteractionNode,System.Object)">
            <summary>
            Executes the specified this action on the specified target.
            </summary>
            <param name="actionMessage">The action message.</param>
            <param name="handlingNode">The node.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.ApplicationModel.ApplicationModelExtensions">
            <summary>
            Hosts extension methods for application model classes.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.ApplicationModelExtensions.Focus``2(Caliburn.PresentationFramework.ApplicationModel.IInputManager,``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Focuses the control bound to the property on the view model.
            </summary>
            <param name="inputManager">The input manager.</param>
            <param name="viewModel">The view model.</param>
            <param name="property">The property.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.ApplicationModelExtensions.InsertOrUpdate``1(Caliburn.PresentationFramework.ApplicationModel.IStateManager,System.String,``0)">
            <summary>
            Inserts or updates a value in the state.
            </summary>
            <param name="state">The state.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.ApplicationModelExtensions.Get``1(Caliburn.PresentationFramework.ApplicationModel.IStateManager,System.String,``0)">
            <summary>
            Gets the value with the specified key.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="state">The state.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.ApplicationModelExtensions.Show(Caliburn.PresentationFramework.ApplicationModel.IWindowManager,System.Object)">
            <summary>
            Shows the window for the model.
            </summary>
            <param name="manager">The manager.</param>
            <param name="rootModel">The root model.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.ApplicationModelExtensions.ShowDialog(Caliburn.PresentationFramework.ApplicationModel.IWindowManager,System.Object)">
            <summary>
            Shows the dialog for the model.
            </summary>
            <param name="manager">The manager.</param>
            <param name="rootModel">The root model.</param>
            <returns>The dialog result</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.ApplicationModelExtensions.Show(Caliburn.PresentationFramework.ApplicationModel.IWindowManager,System.Object,System.Object)">
            <summary>
            Shows the windwo for the model.
            </summary>
            <param name="manager">The manager.</param>
            <param name="rootModel">The root model.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.ApplicationModelExtensions.ShowDialog(Caliburn.PresentationFramework.ApplicationModel.IWindowManager,System.Object,System.Object)">
            <summary>
            Shows the dialog for the model.
            </summary>
            <param name="manager">The manager.</param>
            <param name="rootModel">The root model.</param>
            <param name="context">The context.</param>
            <returns>The dialog result</returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.ApplicationModel.CaliburnApplication">
            <summary>
            A base class for applications based on Caliburn.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.CaliburnApplication.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.ApplicationModel.CaliburnApplication"/> class.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            More than one instance of the <see cref="T:System.Windows.Application"/> class is created per <see cref="T:System.AppDomain"/>.
            </exception>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.CaliburnApplication.OnStartup(System.Windows.StartupEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Application.Startup"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.StartupEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.CaliburnApplication.ShowMainWindow(System.Object)">
            <summary>
            Shows the main window based on the provided model.
            </summary>
            <param name="rootModel">The root model.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.CaliburnApplication.ExecuteShutdownModel(Caliburn.PresentationFramework.ApplicationModel.ISubordinate,System.Action)">
            <summary>
            Executes the shutdown model.
            </summary>
            <param name="subordinate">The subordinate.</param>
            <param name="completed">The completed.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.CaliburnApplication.CreateRootModel">
            <summary>
            Creates the root application model.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.CaliburnApplication.CreateContainer">
            <summary>
            Creates the container.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.CaliburnApplication.Register(System.Collections.Generic.IEnumerable{Caliburn.Core.IoC.IComponentRegistration})">
            <summary>
            Configures Caliburn's components.
            </summary>
            <param name="registrations">The component registrations.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.CaliburnApplication.SelectAssemblies">
            <summary>
            Selects the assemblies which Caliburn will be able to inspect for components, views, etc.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.CaliburnApplication.BeforeConfiguration">
            <summary>
            Called before the Caliburn initialization phase. 
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.CaliburnApplication.ConfigurePresentationFramework(Caliburn.PresentationFramework.Configuration.PresentationFrameworkConfiguration)">
            <summary>
            Configures the presentation framework module.
            </summary>
            <param name="module">The module.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.CaliburnApplication.ConfigureCore(Caliburn.Core.Configuration.CoreConfiguration)">
            <summary>
            Configures the core module.
            </summary>
            <param name="module">The module.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.ApplicationModel.CaliburnApplication.Container">
            <summary>
            Gets the container.
            </summary>
            <value>The container.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.ApplicationModel.DefaultInputManager">
            <summary>
            The default implemenation of <see cref="T:Caliburn.PresentationFramework.ApplicationModel.IInputManager"/>.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.ApplicationModel.IInputManager">
            <summary>
            Implemented by services that provide focus and key binding functionality.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.IInputManager.Focus(System.Object)">
            <summary>
            Focuses the view bound to the view model.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.IInputManager.Focus(System.Object,System.String)">
            <summary>
            Focuses the control bound to the property on the view model.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="propertyPath">The property path.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultInputManager.Focus(System.Object)">
            <summary>
            Focuses the view bound to the view model.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultInputManager.Focus(System.Object,System.String)">
            <summary>
            Focuses the control bound to the property on the view model.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="propertyPath">The property path.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultInputManager.GetView(System.Object)">
            <summary>
            Gets the view bound to the specified model.
            </summary>
            <param name="model">The model.</param>
            <returns></returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.ApplicationModel.DefaultWindowManager">
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.ApplicationModel.IWindowManager"/>.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.ApplicationModel.IWindowManager">
            <summary>
            A service that manages windows.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.IWindowManager.Show(System.Object,System.Object,System.Action{Caliburn.PresentationFramework.ApplicationModel.ISubordinate,System.Action})">
            <summary>
            Shows a window for the specified model.
            </summary>
            <param name="rootModel">The root model.</param>
            <param name="context">The context.</param>
            <param name="handleShutdownModel">The handle shutdown model.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.IWindowManager.ShowDialog(System.Object,System.Object,System.Action{Caliburn.PresentationFramework.ApplicationModel.ISubordinate,System.Action})">
            <summary>
            Shows a modal dialog for the specified model.
            </summary>
            <param name="rootModel">The root model.</param>
            <param name="context">The context.</param>
            <param name="handleShutdownModel">The handle shutdown model.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultWindowManager.GetSignificantView(System.Windows.DependencyObject)">
            <summary>
            Gets the significant view.
            </summary>
            <param name="view">The view.</param>
            <returns>The non-generated view that was wrapped by Caliburn.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultWindowManager.#ctor(Caliburn.PresentationFramework.ViewModels.IViewLocator,Caliburn.PresentationFramework.ViewModels.IViewModelBinder)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.ApplicationModel.DefaultWindowManager"/> class.
            </summary>
            <param name="viewLocator">The view locator.</param>
            <param name="viewModelBinder">The view model binder.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultWindowManager.ShowDialog(System.Object,System.Object,System.Action{Caliburn.PresentationFramework.ApplicationModel.ISubordinate,System.Action})">
            <summary>
            Shows the dialog.
            </summary>
            <param name="rootModel">The root model.</param>
            <param name="context">The context.</param>
            <param name="handleShutdownModel">The handle shutdown model.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultWindowManager.Show(System.Object,System.Object,System.Action{Caliburn.PresentationFramework.ApplicationModel.ISubordinate,System.Action})">
            <summary>
            Shows a window for the specified model.
            </summary>
            <param name="rootModel">The root model.</param>
            <param name="context">The context.</param>
            <param name="handleShutdownModel">The handle shutdown model.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultWindowManager.CreateWindow(System.Object,System.Boolean,System.Object,System.Action{Caliburn.PresentationFramework.ApplicationModel.ISubordinate,System.Action})">
            <summary>
            Creates the window.
            </summary>
            <param name="rootModel">The root model.</param>
            <param name="isDialog">Indicates it is a dialog window.</param>
            <param name="context">The context.</param>
            <param name="handleShutdownModel">The handle shutdown model.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultWindowManager.EnsureWindow(System.Object,System.Object,System.Boolean)">
            <summary>
            Ensures the that the view is a window or provides one.
            </summary>
            <param name="model">The model.</param>
            <param name="view">The view.</param>
            <param name="isDialog">Indicates we are insuring a dialog window.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultWindowManager.CreatePage(System.Object,System.Object,System.Action{Caliburn.PresentationFramework.ApplicationModel.ISubordinate,System.Action})">
            <summary>
            Creates the page.
            </summary>
            <param name="rootModel">The root model.</param>
            <param name="context">The context.</param>
            <param name="handleShutdownModel">The handle shutdown model.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultWindowManager.EnsurePage(System.Object,System.Object)">
            <summary>
            Ensures the view is a page or provides one.
            </summary>
            <param name="model">The model.</param>
            <param name="view">The view.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.DefaultWindowManager.OnShutdownAttempted(Caliburn.PresentationFramework.Screens.IScreen,System.Windows.Window,System.Action{Caliburn.PresentationFramework.ApplicationModel.ISubordinate,System.Action},System.ComponentModel.CancelEventArgs)">
            <summary>
            Called when shutdown attempted.
            </summary>
            <param name="rootModel">The root model.</param>
            <param name="view">The view.</param>
            <param name="handleShutdownModel">The handler for the shutdown model.</param>
            <param name="e">The <see cref="T:System.ComponentModel.CancelEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.ApplicationModel.ILifecycleNotifier">
            <summary>
            A class capable of notifying subscribers of events related to its lifecycle.
            </summary>
        </member>
        <member name="E:Caliburn.PresentationFramework.ApplicationModel.ILifecycleNotifier.Initialized">
            <summary>
            Occurs when initialized.
            </summary>
        </member>
        <member name="E:Caliburn.PresentationFramework.ApplicationModel.ILifecycleNotifier.AttemptingShutdown">
            <summary>
            Occurs before attempting to shutdown.
            </summary>
        </member>
        <member name="E:Caliburn.PresentationFramework.ApplicationModel.ILifecycleNotifier.WasShutdown">
            <summary>
            Occurs after the this instance was shutdown.
            </summary>
        </member>
        <member name="E:Caliburn.PresentationFramework.ApplicationModel.ILifecycleNotifier.Activated">
            <summary>
            Occurs when activated.
            </summary>
        </member>
        <member name="E:Caliburn.PresentationFramework.ApplicationModel.ILifecycleNotifier.Deactivated">
            <summary>
            Occurs when deactivated.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.ApplicationModel.IsolatedStorageStateManager">
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.ApplicationModel.IStateManager"/> that uses isolated storage as its backing store.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.ApplicationModel.IStateManager">
            <summary>
            Describes a service capable of managing basic state values.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.IStateManager.Initialize(System.String)">
            <summary>
            Initializes the backing store.
            </summary>
            <param name="stateName">Name of the state.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.IStateManager.CommitChanges(System.String)">
            <summary>
            Commits the changes to the backing store.
            </summary>
            <param name="stateName">Name of the state.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.IStateManager.InsertOrUpdate(System.String,System.String)">
            <summary>
            Inserts or updates a value in the state.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.IStateManager.Get(System.String)">
            <summary>
            Gets the value with the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.IStateManager.Remove(System.String)">
            <summary>
            Removes the value with the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="E:Caliburn.PresentationFramework.ApplicationModel.IStateManager.AfterStateLoad">
            <summary>
            Occurs after the state was loaded from the backing store.
            </summary>
        </member>
        <member name="E:Caliburn.PresentationFramework.ApplicationModel.IStateManager.BeforeStateCommit">
            <summary>
            Occurs before the state is committed to the backing store.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.IsolatedStorageStateManager.Initialize(System.String)">
            <summary>
            Initializes the backing store.
            </summary>
            <param name="stateName">Name of the state.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.IsolatedStorageStateManager.CommitChanges(System.String)">
            <summary>
            Commits the changes.
            </summary>
            <param name="stateName">Name of the state.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.IsolatedStorageStateManager.InsertOrUpdate(System.String,System.String)">
            <summary>
            Inserts or updates a value in the state.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.IsolatedStorageStateManager.Get(System.String)">
            <summary>
            Gets the value with the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.IsolatedStorageStateManager.Remove(System.String)">
            <summary>
            Removes the value with the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="E:Caliburn.PresentationFramework.ApplicationModel.IsolatedStorageStateManager.AfterStateLoad">
            <summary>
            Occurs after the state was loaded from the backing store.
            </summary>
        </member>
        <member name="E:Caliburn.PresentationFramework.ApplicationModel.IsolatedStorageStateManager.BeforeStateCommit">
            <summary>
            Occurs before the state is committed to the backing store.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.ApplicationModel.ISubordinate">
            <summary>
            A model that is owned by an <see cref="T:Caliburn.PresentationFramework.Screens.IScreen"/>.
            </summary>
        </member>
        <member name="P:Caliburn.PresentationFramework.ApplicationModel.ISubordinate.Master">
            <summary>
            Gets the <see cref="T:Caliburn.PresentationFramework.Screens.IScreen"/> that owns this instance.
            </summary>
            <value>The master.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.ApplicationModel.ISubordinateComposite">
            <summary>
            An <see cref="T:Caliburn.PresentationFramework.ApplicationModel.ISubordinate"/> with one or more children.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.ISubordinateComposite.GetChildren">
            <summary>
            Gets the children.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.ApplicationModel.ISupportCustomShutdown">
            <summary>
            Instances that implement this interface support custom shutdown logic through a developer defined model.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.ISupportCustomShutdown.CreateShutdownModel">
            <summary>
            Creates the shutdown model.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.ISupportCustomShutdown.CanShutdown(Caliburn.PresentationFramework.ApplicationModel.ISubordinate)">
            <summary>
            Determines whether this instance can shutdown based on the evaluated shutdown model.
            </summary>
            <param name="shutdownModel">The shutdown model.</param>
            <returns>
            	<c>true</c> if this instance can shutdown; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.ApplicationModel.SubordinateContainer">
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.ApplicationModel.ISubordinateComposite"/> that supports exactly one child.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.SubordinateContainer.#ctor(Caliburn.PresentationFramework.Screens.IScreen,Caliburn.PresentationFramework.ApplicationModel.ISubordinate)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.ApplicationModel.SubordinateContainer"/> class.
            </summary>
            <param name="master">The master.</param>
            <param name="child">The child.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.SubordinateContainer.GetChildren">
            <summary>
            Gets the children.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.ApplicationModel.SubordinateContainer.Master">
            <summary>
            Gets the <see cref="T:Caliburn.PresentationFramework.Screens.IScreen"/> that owns this instance.
            </summary>
            <value>The master.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.ApplicationModel.SubordinateContainer.Child">
            <summary>
            Gets or sets the child.
            </summary>
            <value>The child.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.ApplicationModel.SubordinateGroup">
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.ApplicationModel.ISubordinateComposite"/> that has multiple children.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.BindableCollection`1">
            <summary>
            A base collection class that supports automatic UI thread marshalling.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Caliburn.PresentationFramework.IObservableCollection`1">
            <summary>
            Represents a collection that is observable.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Caliburn.PresentationFramework.BindableCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.BindableCollection`1"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.BindableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.BindableCollection`1"/> class.
            </summary>
            <param name="collection">The collection from which the elements are copied.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="collection"/> parameter cannot be null.
            </exception>
        </member>
        <member name="M:Caliburn.PresentationFramework.BindableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged"/> event with the provided arguments.
            </summary>
            <param name="e">Arguments of the event being raised.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.BindableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged"/> event with the provided arguments.
            </summary>
            <param name="e">Arguments of the event being raised.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.BindableCollection`1.RaiseCollectionChangedEventImmediately(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the collection changed event immediately.
            </summary>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.BindableCollection`1.RaisePropertyChangedEventImmediately(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the property changed event immediately.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.SubordinateGroup.#ctor(Caliburn.PresentationFramework.Screens.IScreen)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.ApplicationModel.SubordinateGroup"/> class.
            </summary>
            <param name="master">The master.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ApplicationModel.SubordinateGroup.GetChildren">
            <summary>
            Gets the children.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.ApplicationModel.SubordinateGroup.Master">
            <summary>
            Gets the <see cref="T:Caliburn.PresentationFramework.Screens.IScreen"/> that owns this instance.
            </summary>
            <value>The master.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Behaviors.DependencyMode">
            <summary>
            Inidicates how dependency tracking should occur.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Behaviors.DependencyMode.AlwaysRecord">
            <summary>
            Will record dependencies on every get.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Behaviors.DependencyMode.RecordOnce">
            <summary>
            Will record dependencies on the first get.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Behaviors.DependencyMode.DoNotRecord">
            <summary>
            Will not record dependencies.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Behaviors.DoNotNotifyAttribute">
            <summary>
            Used to indicate that a particular property should not raise change notification.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Behaviors.NotifyPropertyChangedAttribute">
            <summary>
            Applies a behavior which implements <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Behaviors.NotifyPropertyChangedAttribute.DefaultDependencyMode">
            <summary>
            Gets or sets the default dependency mode.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Behaviors.NotifyPropertyChangedAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Behaviors.NotifyPropertyChangedAttribute"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Behaviors.NotifyPropertyChangedAttribute.GetInterfaces(System.Type)">
            <summary>
            Gets the interfaces which represent this behavior.
            </summary>
            <param name="implementation">The implementation.</param>
            <returns>The representative interfaces.</returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.Behaviors.NotifyPropertyChangedAttribute.DependencyMode">
            <summary>
            Gets or sets the dependency mode.
            </summary>
            <value>The dependency mode.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Behaviors.ScreenAttribute">
            <summary>
            Applies a behavior which implements <see cref="T:Caliburn.PresentationFramework.Screens.IScreen"/>.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Behaviors.ScreenAttribute.DefaultDisplayName">
            <summary>
            Gets or sets the default display name property name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="F:Caliburn.PresentationFramework.Behaviors.ScreenAttribute.DefaultInitialize">
            <summary>
            Gets or sets the default initialize method name.
            </summary>
            <value>The initialize.</value>
        </member>
        <member name="F:Caliburn.PresentationFramework.Behaviors.ScreenAttribute.DefaultCanShutdown">
            <summary>
            Gets or sets the default can shutdown method name.
            </summary>
            <value>The can shutdown.</value>
        </member>
        <member name="F:Caliburn.PresentationFramework.Behaviors.ScreenAttribute.DefaultShutdown">
            <summary>
            Gets or sets the default shutdown method name.
            </summary>
            <value>The can shutdown.</value>
        </member>
        <member name="F:Caliburn.PresentationFramework.Behaviors.ScreenAttribute.DefaultActivate">
            <summary>
            Gets or sets the default activate method name.
            </summary>
            <value>The activate.</value>
        </member>
        <member name="F:Caliburn.PresentationFramework.Behaviors.ScreenAttribute.DefaultDeactivate">
            <summary>
            Gets or sets the default deactivate method name.
            </summary>
            <value>The deactivate.</value>
        </member>
        <member name="M:Caliburn.PresentationFramework.Behaviors.ScreenAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Behaviors.ScreenAttribute"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Behaviors.ScreenAttribute.GetInterfaces(System.Type)">
            <summary>
            Gets the interfaces which represent this behavior.
            </summary>
            <param name="implementation">The implementation.</param>
            <returns>The representative interfaces.</returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.Behaviors.ScreenAttribute.DisplayName">
            <summary>
            Gets or sets the display name property name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Behaviors.ScreenAttribute.Initialize">
            <summary>
            Gets or sets the initialize method name.
            </summary>
            <value>The initialize.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Behaviors.ScreenAttribute.CanShutdown">
            <summary>
            Gets or sets the can shutdown method name.
            </summary>
            <value>The can shutdown.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Behaviors.ScreenAttribute.Shutdown">
            <summary>
            Gets or sets the shutdown method name.
            </summary>
            <value>The shutdown.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Behaviors.ScreenAttribute.Activate">
            <summary>
            Gets or sets the activate method name.
            </summary>
            <value>The activate.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Behaviors.ScreenAttribute.Deactivate">
            <summary>
            Gets or sets the deactivate method name.
            </summary>
            <value>The deactivate.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Behaviors.ValidateAttribute">
            <summary>
            Applies a behavior which implements <see cref="T:System.ComponentModel.IDataErrorInfo"/>.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Behaviors.ValidateAttribute.GetInterfaces(System.Type)">
            <summary>
            Gets the interfaces which represent this behavior.
            </summary>
            <param name="implementation">The implementation.</param>
            <returns>The representative interfaces.</returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.Commands.Command">
            <summary>
            Hosts attached properties related to commands.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Commands.Command.ParentProperty">
            <summary>
            A property representing the availability effect of a given message.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.Command.SetParent(System.Windows.DependencyObject,Caliburn.PresentationFramework.Commands.ICompositeCommand)">
            <summary>
            Sets the parent.
            </summary>
            <param name="d">The d.</param>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.Command.GetParent(System.Windows.DependencyObject)">
            <summary>
            Gets the triggers.
            </summary>
            <param name="d">The d.</param>
            <returns></returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.Commands.CommandAttribute">
            <summary>
            Specifies a command which should be registered with the container and optionally allows customization of the executiion method.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Commands.CommandAttribute.CommandNameSuffix">
            <summary>
            The suffix that is removed from the class name when registering by Key with the container.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Commands.CommandAttribute"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Commands.CommandAttribute"/> class.
            </summary>
            <param name="name">The name to use when registering the command with the container.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandAttribute.GetComponentInfo(System.Type)">
            <summary>
            Registers the type with the specified container.
            </summary>
            <param name="decoratedType">The decorated type.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandAttribute.GetCommandName(System.Type)">
            <summary>
            Gets the name of the command, inferring it if no name was given.
            </summary>
            <param name="commandType">The command type.</param>
            <returns>The command name.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandAttribute.InferCommandName(System.Type)">
            <summary>
            Infers the name of the command.
            </summary>
            <param name="commandType">Type of the command.</param>
            <returns></returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.Commands.CommandAttribute.ExecuteMethod">
            <summary>
            Gets or sets the method to use as the execution method of the command.
            </summary>
            <value>The execute method.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Commands.CommandMessage">
            <summary>
            An <see cref="T:Caliburn.PresentationFramework.IRoutedMessage"/> for commands.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Commands.CommandMessage.ParametersProperty">
            <summary>
            Represents the parameters of a command message.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Commands.CommandMessage.CommandProperty">
            <summary>
            Represents the command tied to the message.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Commands.CommandMessage.ParentCommandProperty">
            <summary>
            Represents the parent of the command.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Commands.CommandMessage.OutcomePathProperty">
            <summary>
            Represents the return path of an command message.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Commands.CommandMessage.AvailabilityEffectProperty">
            <summary>
            Represents the availability effect of an command message.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Commands.CommandMessage"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandMessage.#ctor(Caliburn.PresentationFramework.ViewModels.IViewModelDescriptionFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Commands.CommandMessage"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandMessage.Initialize(Caliburn.PresentationFramework.IInteractionNode)">
            <summary>
            Initializes the message for interaction with the specified node.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandMessage.CreateInstanceCore">
            <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:System.Windows.Freezable"/> derived class.
            </summary>
            <returns>The new instance.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandMessage.Unwrap">
            <summary>
            Gets the underlying object instance to which this handler routes requests.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandMessage.Handles(Caliburn.PresentationFramework.IRoutedMessage)">
            <summary>
            Indicates whether this instance can handle the speicified message.
            </summary>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandMessage.Process(Caliburn.PresentationFramework.IRoutedMessage,System.Object)">
            <summary>
            Processes the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="context">An object that provides additional context for message processing.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandMessage.UpdateAvailability(Caliburn.PresentationFramework.IMessageTrigger)">
            <summary>
            Updates the availability of the trigger.
            </summary>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandMessage.MakeAwareOf(Caliburn.PresentationFramework.IMessageTrigger)">
            <summary>
            Makes the handler aware of a specific trigger.
            </summary>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandMessage.RelatesTo(System.Object)">
            <summary>
            Indicates whether this message is related to the potential target.
            </summary>
            <param name="potentialTarget">The potential target.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandMessage.Equals(Caliburn.PresentationFramework.IRoutedMessage)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandMessage.AddMetadata(Caliburn.Core.Metadata.IMetadata)">
            <summary>
            Adds metadata to the store.
            </summary>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandMessage.FindMetadata``1">
            <summary>
            Finds the matching metadata.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandMessage.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandMessage.GetDefaultHandlers(Caliburn.PresentationFramework.IInteractionNode)">
            <summary>
            Gets the default handlers for this type of message.
            </summary>
            <param name="node">The node to get default handlers for.</param>
            <returns></returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.Commands.CommandMessage.Command">
            <summary>
            Gets or sets the command.
            </summary>
            <value>The command.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Commands.CommandMessage.ParentCommand">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="E:Caliburn.PresentationFramework.Commands.CommandMessage.Completed">
            <summary>
            Occurs when the command has completed executing.
            </summary>
        </member>
        <member name="P:Caliburn.PresentationFramework.Commands.CommandMessage.OutcomePath">
            <summary>
            Gets or sets the path to use in binding the return value.
            </summary>
            <value>The return path.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Commands.CommandMessage.DefaultOutcomeElement">
            <summary>
            Gets the default element to bind to if no return path is specified.
            </summary>
            <value>The default element.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Commands.CommandMessage.AvailabilityEffect">
            <summary>
            Gets or sets the availability effect.
            </summary>
            <value>The availability effect.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Commands.CommandMessage.Parameters">
            <summary>
            Gets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Commands.CommandMessage.Source">
            <summary>
            Gets the source of the message.
            </summary>
            <value>The source.</value>
        </member>
        <member name="E:Caliburn.PresentationFramework.Commands.CommandMessage.Invalidated">
            <summary>
            Occurs when the message is invalidated.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Commands.CommandMessageParser">
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.Parsers.IMessageParser"/> for commands.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandMessageParser.#ctor(Caliburn.PresentationFramework.Conventions.IConventionManager,Caliburn.PresentationFramework.IMessageBinder,Caliburn.PresentationFramework.Commands.CommandSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Commands.CommandMessageParser"/> class.
            </summary>
            <param name="conventionManager">The convention mangager.</param>
            <param name="messageBinder">The message binder.</param>
            <param name="commandSource">The location that the parser will use to get the command.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandMessageParser.#ctor(Caliburn.PresentationFramework.Conventions.IConventionManager,Caliburn.PresentationFramework.IMessageBinder,System.Windows.Data.UpdateSourceTrigger,Caliburn.PresentationFramework.Commands.CommandSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Commands.CommandMessageParser"/> class.
            </summary>
            <param name="conventionManager">The convention manager.</param>
            <param name="messageBinder">The binder.</param>
            <param name="defaultTrigger">The default trigger.</param>
            <param name="commandSource">The location that the parser will use to get the command.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandMessageParser.ParseHeadAndTail(System.String,Caliburn.PresentationFramework.Commands.CommandMessage)">
            <summary>
            Parses the root portion of the message.
            </summary>
            <param name="messageText">The message text.</param>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.CommandMessageParser.SetCore(Caliburn.PresentationFramework.Commands.CommandMessage,System.Windows.DependencyObject,System.String)">
            <summary>
            Sets the core value of the message.
            </summary>
            <param name="message">The message.</param>
            <param name="target">The target.</param>
            <param name="coreOfMessage">The core representation of the message.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.Commands.CommandSource">
            <summary>
            Indicates locations where a command can be found.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Commands.CommandSource.Resource">
            <summary>
            Looks for the command in the resources collection.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Commands.CommandSource.Container">
            <summary>
            Looks for the command in the DI container.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Commands.CommandSource.Bound">
            <summary>
            Databinds to a command using a property path.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Commands.ICompositeCommand">
            <summary>
            A command that executes multiple child commands.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.ICompositeCommand.AddOrUpdateChild(Caliburn.PresentationFramework.Commands.CommandMessage,System.Boolean)">
            <summary>
            Adds or updates the child command.
            </summary>
            <param name="child">The child.</param>
            <param name="availability">if set to <c>true</c> the child can execute.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Commands.ICompositeCommand.RemoveChild(Caliburn.PresentationFramework.Commands.CommandMessage)">
            <summary>
            Removes the child.
            </summary>
            <param name="child">The child.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.Configuration.IPresentationFrameworkServicesDescription">
            <summary>
            Desscribes the services required for the presentation framework to function.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Configuration.IPresentationFrameworkServicesDescription.RoutedMessageController``1">
            <summary>
            Customizes the routed message controller used by Caliburn.
            </summary>
            <typeparam name="T">The routed message controller type.</typeparam>
        </member>
        <member name="M:Caliburn.PresentationFramework.Configuration.IPresentationFrameworkServicesDescription.MessageBinder``1">
            <summary>
            Customizes the method binder used by Caliburn.
            </summary>
            <typeparam name="T">The method binder type.</typeparam>
        </member>
        <member name="M:Caliburn.PresentationFramework.Configuration.IPresentationFrameworkServicesDescription.Parser``1">
            <summary>
            Customizes the message parser used by Caliburn.
            </summary>
            <typeparam name="T">The message parser type.</typeparam>
        </member>
        <member name="M:Caliburn.PresentationFramework.Configuration.IPresentationFrameworkServicesDescription.ViewModelDescriptionFactory``1">
            <summary>
            Customizes the view model description builder.
            </summary>
            <typeparam name="T">The action factory type.</typeparam>
        </member>
        <member name="M:Caliburn.PresentationFramework.Configuration.IPresentationFrameworkServicesDescription.ActionLocator``1">
            <summary>
            Customizes the actions locator.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Configuration.IPresentationFrameworkServicesDescription.ViewLocator``1">
            <summary>
            Customizes the view strategy used by Caliburn.
            </summary>
            <typeparam name="T">The view strategy type.</typeparam>
        </member>
        <member name="M:Caliburn.PresentationFramework.Configuration.IPresentationFrameworkServicesDescription.ViewModelBinder``1">
            <summary>
            Customizes the binder used by Caliburn.
            </summary>
            <typeparam name="T">The binder type.</typeparam>
        </member>
        <member name="M:Caliburn.PresentationFramework.Configuration.IPresentationFrameworkServicesDescription.ViewModelFactory``1">
            <summary>
            Custmizes the view model factory used by Caliburn.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Configuration.IPresentationFrameworkServicesDescription.ConventionManager``1">
            <summary>
            Customizes the convention manager used by Caliburn.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Configuration.IPresentationFrameworkServicesDescription.Validator``1">
            <summary>
            Customizes the validator used by Caliburn.
            </summary>
            <typeparam name="T">The validator type.</typeparam>
        </member>
        <member name="M:Caliburn.PresentationFramework.Configuration.IPresentationFrameworkServicesDescription.WindowManager``1">
            <summary>
            Customizes the window manager used by Caliburn.
            </summary>
            <typeparam name="T">The window manager type.</typeparam>
        </member>
        <member name="M:Caliburn.PresentationFramework.Configuration.IPresentationFrameworkServicesDescription.InputManager``1">
            <summary>
            Customizes the input manager used by Caliburn.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.Configuration.PresentationFrameworkConfiguration">
            <summary>
            The presenation framework module.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Configuration.PresentationFrameworkConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Configuration.PresentationFrameworkConfiguration"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Configuration.PresentationFrameworkConfiguration.RegisterAllScreensWithSubjects">
            <summary>
            Searches the <see cref="T:Caliburn.Core.IAssemblySource"/> and registers all screens which concretely implement <see cref="T:Caliburn.PresentationFramework.Screens.IScreen`1"/> using their closed interface type.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Configuration.PresentationFrameworkConfiguration.RegisterAllScreensWithSubjects(System.Boolean)">
            <summary>
            Searches the <see cref="T:Caliburn.Core.IAssemblySource"/> and registers all screens which concretely implement <see cref="T:Caliburn.PresentationFramework.Screens.IScreen`1"/> using their closed interface type.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Configuration.PresentationFrameworkConfiguration.Initialize(Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            Initializes the core.
            </summary>
            <param name="serviceLocator">The service locator.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.Configuration.PresentationFrameworkConfiguration.IsInDesignMode">
            <summary>
            Gets a value indicating whether the framework is in design mode.
            </summary>
            <value>
            	<c>true</c> if the framework is in design mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Conventions.ApplicableAction">
            <summary>
            An <see cref="T:Caliburn.PresentationFramework.ViewModels.IViewApplicable"/> that attaches an action to an element.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.ViewModels.IViewApplicable">
            <summary>
            Implemented by classes that apply behavior to views.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.IViewApplicable.ApplyTo(System.Windows.DependencyObject)">
            <summary>
            Applies the behavior to the specified view.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.ApplicableAction.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Conventions.ApplicableAction"/> class.
            </summary>
            <param name="elementName">Name of the element.</param>
            <param name="actionTargetPath">The path to the action target.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.ApplicableAction.ApplyTo(System.Windows.DependencyObject)">
            <summary>
            Applies the behavior to the specified view.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.Conventions.ApplicableBinding">
            <summary>
            An <see cref="T:Caliburn.PresentationFramework.ViewModels.IViewApplicable"/> that sets a databinding on an element.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.ApplicableBinding.#ctor(System.String,System.Windows.DependencyProperty,System.String,System.Windows.Data.BindingMode,System.Boolean,System.Boolean,System.Windows.Data.IValueConverter)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Conventions.ApplicableBinding"/> class.
            </summary>
            <param name="elementName">Name of the element.</param>
            <param name="dependencyProperty">The dependency property.</param>
            <param name="path">The path.</param>
            <param name="mode">The mode.</param>
            <param name="validate">Inidicates whether or not to turn on validation for the binding.</param>
            <param name="checkTemplate">if set to <c>true</c> [check item template].</param>
            <param name="converter">The value converter to apply.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.ApplicableBinding.ApplyTo(System.Windows.DependencyObject)">
            <summary>
            Applies the behavior to the specified view.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.ApplicableBinding.CheckForViewModelProperty(System.Windows.DependencyObject,System.Windows.DependencyProperty)">
            <summary>
            Checks to see if the dependency property should be converted to a view model property.
            </summary>
            <param name="element">The element.</param>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.ApplicableBinding.TryAddValidation(System.Windows.DependencyObject,System.Windows.Data.Binding,System.Windows.DependencyProperty)">
            <summary>
            Tries to add validation to the binding.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.ApplicableBinding.ValueNotSet(System.Windows.DependencyObject)">
            <summary>
            Values the not set.
            </summary>
            <param name="element">The element.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.ApplicableBinding.NeedsItemTemplate(System.Windows.Controls.ItemsControl)">
            <summary>
            Needses the item template.
            </summary>
            <param name="control">The control.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.ApplicableBinding.CreateTemplate(System.Windows.Controls.Control)">
            <summary>
            Creates an item template which binds view models.
            </summary>
            <param name="control">The control.</param>
            <returns></returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.Conventions.ConventionExtensions">
            <summary>
            Hosts extension methods related to conventions.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Conventions.ConventionExtensions.GetNamedElementsImplementation">
            <summary>
            The overridable implemenation of GetNamedElements.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.ConventionExtensions.DetermineConventions(Caliburn.PresentationFramework.Conventions.IConventionManager,Caliburn.PresentationFramework.ViewModels.IViewModelDescription,System.Windows.DependencyObject)">
            <summary>
            Determines the conventions for the specified view and view model description.
            </summary>
            <param name="conventionManager">The convention manager.</param>
            <param name="viewModelDescription">The view model description.</param>
            <param name="view">The view.</param>
            <returns>The applicalble conventions.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.ConventionExtensions.FindElementConventionOrFail(Caliburn.PresentationFramework.Conventions.IConventionManager,System.Object)">
            <summary>
            Finds the interaction defaults or fail.
            </summary>
            <param name="conventionManager">The convention manager.</param>
            <param name="element">The element.</param>
            <returns></returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.Conventions.DefaultActionConvention">
            <summary>
            The default implementation of <see cref="T:Caliburn.PresentationFramework.Conventions.IViewConvention`1"/> for actions.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Conventions.ViewConventionBase`1">
            <summary>
            A base class for binding conventions.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Conventions.IViewConvention`1">
            <summary>
            A convention that applies to a view.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.IViewConvention`1.TryCreateApplication(Caliburn.PresentationFramework.ViewModels.IViewModelDescription,Caliburn.PresentationFramework.Conventions.IElementDescription,`0)">
            <summary>
            Tries the create an application of the convention.
            </summary>
            <param name="description">The description.</param>
            <param name="element">The element.</param>
            <param name="target">The target.</param>
            <returns>The application or null if not applicable.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.ViewConventionBase`1.TryCreateApplication(Caliburn.PresentationFramework.ViewModels.IViewModelDescription,Caliburn.PresentationFramework.Conventions.IElementDescription,`0)">
            <summary>
            Tries to creates the application of the convention.
            </summary>
            <param name="description">The description.</param>
            <param name="element">The element.</param>
            <param name="target">The target.</param>
            <returns>
            The convention application, or null if not applicable
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.ViewConventionBase`1.DeterminePropertyPath(System.String)">
            <summary>
            Determines the property path.
            </summary>
            <param name="fullName">The full name.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.ViewConventionBase`1.GetBoundProperty(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Gets the boud property.
            </summary>
            <param name="info">The info.</param>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.ViewConventionBase`1.TryGetByPattern(System.Reflection.PropertyInfo,System.String,System.String@,System.Reflection.PropertyInfo@,System.Func{System.String,System.String},System.Func{System.Reflection.PropertyInfo,System.String,System.Boolean})">
            <summary>
            Tries to generate a new property and property path based on a predicate.
            </summary>
            <param name="originalProperty">The original property.</param>
            <param name="originalPropertyPath">The original property path.</param>
            <param name="newPropertyPath">The new property path.</param>
            <param name="newProperty">The new property.</param>
            <param name="deriveBaseName">A function that derives the base property name.</param>
            <param name="predicate">A predicate that matches properties.</param>
            <returns>True if a match was found, false otherwise.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.ViewConventionBase`1.CreateActionMessage(Caliburn.PresentationFramework.Actions.IAction)">
            <summary>
            Creates the action message.
            </summary>
            <param name="action">The action.</param>
            <returns>The message.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.ViewConventionBase`1.ShouldValidate(System.Reflection.PropertyInfo)">
            <summary>
            Indicates whether the specified property should be violated.
            </summary>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.Conventions.ViewConventionBase`1.MessageBinder">
            <summary>
            Gets the message binder.
            </summary>
            <value>The message binder.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Conventions.ViewConventionBase`1.ViewModelDescriptionFactory">
            <summary>
            Gets the view model description factory.
            </summary>
            <value>The view model description factory.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Conventions.ViewConventionBase`1.Validator">
            <summary>
            Gets the validator.
            </summary>
            <value>The validator.</value>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.DefaultActionConvention.TryCreateApplication(Caliburn.PresentationFramework.ViewModels.IViewModelDescription,Caliburn.PresentationFramework.Conventions.IElementDescription,Caliburn.PresentationFramework.Actions.IAction)">
            <summary>
            Creates the application of the convention.
            </summary>
            <param name="description">The description.</param>
            <param name="element">The element.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.Conventions.DefaultBindingConvention">
            <summary>
            The default implementation of <see cref="T:Caliburn.PresentationFramework.Conventions.IViewConvention`1"/> for bindings.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.DefaultBindingConvention.TryCreateApplication(Caliburn.PresentationFramework.ViewModels.IViewModelDescription,Caliburn.PresentationFramework.Conventions.IElementDescription,System.Reflection.PropertyInfo)">
            <summary>
            Creates the application of the convention.
            </summary>
            <param name="description">The description.</param>
            <param name="element">The element.</param>
            <param name="property">The property.</param>
            <returns>The convention application.</returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.Conventions.DefaultConventionManager">
            <summary>
            The default implementation of <see cref="T:Caliburn.PresentationFramework.Conventions.IConventionManager"/>.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Conventions.IConventionManager">
            <summary>
            Implemented by services that understand conventions.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.IConventionManager.AddElementConvention(Caliburn.PresentationFramework.Conventions.IElementConvention)">
            <summary>
            Adds the element convention.
            </summary>
            <param name="convention">The convention.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.IConventionManager.AddViewConventions(Caliburn.PresentationFramework.Conventions.IViewConventionCategory)">
            <summary>
            Adds the view convention category.
            </summary>
            <param name="conventionCategory">The convention category.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.IConventionManager.GetElementConvention(System.Type)">
            <summary>
            Gets the element convention for the type of element specified.
            </summary>
            <param name="elementType">Type of the element.</param>
            <returns>The convention.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.IConventionManager.DetermineConventions(Caliburn.PresentationFramework.ViewModels.IViewModelDescription,System.Collections.Generic.IEnumerable{Caliburn.PresentationFramework.Conventions.IElementDescription})">
            <summary>
            Determines the conventions for a view model and a set of UI elements.
            </summary>
            <param name="viewModelDescription">The view model description.</param>
            <param name="elementDescriptions">The element descriptions.</param>
            <returns>The applicable conventions.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.IConventionManager.ApplyActionCreationConventions(Caliburn.PresentationFramework.Actions.IAction,Caliburn.Core.Invocation.IMethod)">
            <summary>
            Applies the action creation conventions to the specified action.
            </summary>
            <param name="action">The action.</param>
            <param name="targetMethod">The target method.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.DefaultConventionManager.#ctor(Caliburn.Core.Invocation.IMethodFactory,Caliburn.Core.Invocation.IEventHandlerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Conventions.DefaultConventionManager"/> class.
            </summary>
            <param name="methodFactory">The method factory.</param>
            <param name="eventHandlerFactory">The event handler factory.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.DefaultConventionManager.AddElementConvention(Caliburn.PresentationFramework.Conventions.IElementConvention)">
            <summary>
            Adds the element convention.
            </summary>
            <param name="convention">The convention.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.DefaultConventionManager.AddViewConventions(Caliburn.PresentationFramework.Conventions.IViewConventionCategory)">
            <summary>
            Adds the view conventions.
            </summary>
            <param name="conventionCategory">The convention set.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.DefaultConventionManager.GetElementConvention(System.Type)">
            <summary>
            Gets the element convention for the type of element specified.
            </summary>
            <param name="elementType">Type of the element.</param>
            <returns>The convention.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.DefaultConventionManager.DetermineConventions(Caliburn.PresentationFramework.ViewModels.IViewModelDescription,System.Collections.Generic.IEnumerable{Caliburn.PresentationFramework.Conventions.IElementDescription})">
            <summary>
            Determines the conventions for a view model and a set of UI elements.
            </summary>
            <param name="viewModelDescription">The view model description.</param>
            <param name="elementDescriptions">The element descriptions.</param>
            <returns>The applicable conventions.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.DefaultConventionManager.ApplyActionCreationConventions(Caliburn.PresentationFramework.Actions.IAction,Caliburn.Core.Invocation.IMethod)">
            <summary>
            Applies the action creation conventions.
            </summary>
            <param name="action">The action.</param>
            <param name="targetMethod">The target method.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.DefaultConventionManager.DeriveCanExecuteName(System.String)">
            <summary>
            Derives the name of the can execute method/property.
            </summary>
            <param name="baseName">Name of the base method.</param>
            <returns>The conventional name of the can execute poroperty.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.DefaultConventionManager.SetupDefaultViewConventions">
            <summary>
            Sets up the default view conventions.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.DefaultConventionManager.GetDefaultElementConventions">
            <summary>
            Gets the default element conventions.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.DefaultConventionManager.ElementConvention``1(System.String,System.Windows.DependencyProperty,System.Action{``0,System.Object},System.Func{``0,System.Object})">
            <summary>
            Creates an element convention.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="defaultEvent">The default event.</param>
            <param name="bindableProperty">The bindable property.</param>
            <param name="setter">The setter.</param>
            <param name="getter">The getter.</param>
            <returns>The element convention.</returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.Conventions.DefaultElementConvention`1">
            <summary>
            The default implementation of <see cref="T:Caliburn.PresentationFramework.Conventions.IElementConvention"/>.
            </summary>
            <typeparam name="T">The type of element the convention applies to.</typeparam>
        </member>
        <member name="T:Caliburn.PresentationFramework.Conventions.IElementConvention">
            <summary>
            Represents an element's conventions.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.IElementConvention.CreateTrigger">
            <summary>
            Gets the default trigger.
            </summary>
            <value>The default trigger.</value>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.IElementConvention.GetValue(System.Object)">
            <summary>
            Gets the default value for the element.
            </summary>
            <param name="element">The element.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.IElementConvention.SetValue(System.Object,System.Object)">
            <summary>
            Sets the default value on the element.
            </summary>
            <param name="element">The element.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.Conventions.IElementConvention.Type">
            <summary>
            Gets the type of the element to which the conventions apply.
            </summary>
            <value>The type of the element.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Conventions.IElementConvention.EventName">
            <summary>
            Gets the name of the default event.
            </summary>
            <value>The name of the event.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Conventions.IElementConvention.BindableProperty">
            <summary>
            Gets the default property used in databinding.
            </summary>
            <value>The bindable property.</value>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.DefaultElementConvention`1.#ctor(Caliburn.Core.Invocation.IEventHandlerFactory,System.String,System.Windows.DependencyProperty,System.Action{`0,System.Object},System.Func{`0,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Conventions.DefaultElementConvention`1"/> class.
            </summary>
            <param name="eventHandlerFactory">The event handler factory.</param>
            <param name="defaultEventName">Default name of the event.</param>
            <param name="setter">The setter.</param>
            <param name="getter">The getter.</param>
            <param name="bindableProperty">The bindable property.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.DefaultElementConvention`1.#ctor(System.String,System.Windows.DependencyProperty,System.Action{`0,System.Object},System.Func{`0,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Conventions.DefaultElementConvention`1"/> class.
            </summary>
            <param name="defaultEventName">Default name of the event.</param>
            <param name="bindableProperty">The bindable property.</param>
            <param name="setter">The setter.</param>
            <param name="getter">The getter.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.DefaultElementConvention`1.CreateTrigger">
            <summary>
            Gets the default trigger.
            </summary>
            <returns></returns>
            <value>The default trigger.</value>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.DefaultElementConvention`1.GetValue(System.Object)">
            <summary>
            Gets the default value from the target.
            </summary>
            <param name="target">The target object.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.DefaultElementConvention`1.SetValue(System.Object,System.Object)">
            <summary>
            Sets the default value on the target.
            </summary>
            <param name="target">The target.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.Conventions.DefaultElementConvention`1.Type">
            <summary>
            Gets the type of the element to which the conventions apply.
            </summary>
            <value>The type of the element.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Conventions.DefaultElementConvention`1.BindableProperty">
            <summary>
            Gets the default property used in databinding.
            </summary>
            <value>The bindable property.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Conventions.DefaultElementConvention`1.EventName">
            <summary>
            Gets the name of the default event.
            </summary>
            <value>The name of the event.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Conventions.DefaultElementDescription">
            <summary>
            The default implementation of <see cref="T:Caliburn.PresentationFramework.Conventions.IElementDescription"/>.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Conventions.IElementDescription">
            <summary>
            Describes an element in the Logical or Visual Treen.
            </summary>
        </member>
        <member name="P:Caliburn.PresentationFramework.Conventions.IElementDescription.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Conventions.IElementDescription.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Conventions.IElementDescription.Convention">
            <summary>
            Gets the conventions associated with the element.
            </summary>
            <value>The convention.</value>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.DefaultElementDescription.#ctor(System.Type,System.String,Caliburn.PresentationFramework.Conventions.IElementConvention)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Conventions.DefaultElementDescription"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="name">The name.</param>
            <param name="convention">The convention.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.Conventions.DefaultElementDescription.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Conventions.DefaultElementDescription.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Conventions.DefaultElementDescription.Convention">
            <summary>
            Gets the conventions associated with the element.
            </summary>
            <value>The convention.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Conventions.DefaultViewConventionCategory`1">
            <summary>
            The default implemenation of <see cref="T:Caliburn.PresentationFramework.Conventions.IViewConventionCategory"/>.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Caliburn.PresentationFramework.Conventions.IViewConventionCategory">
            <summary>
            A set of conventions applicable to a view.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.IViewConventionCategory.GetApplications(Caliburn.PresentationFramework.ViewModels.IViewModelDescription,Caliburn.PresentationFramework.Conventions.IElementDescription)">
            <summary>
            Gets the applications.
            </summary>
            <param name="viewModelDescription">The view model description.</param>
            <param name="elementDescription">The element description.</param>
            <returns>The applications.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.DefaultViewConventionCategory`1.#ctor(System.Func{Caliburn.PresentationFramework.ViewModels.IViewModelDescription,System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Conventions.DefaultViewConventionCategory`1"/> class.
            </summary>
            <param name="getTargets">The get targets.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.DefaultViewConventionCategory`1.GetApplications(Caliburn.PresentationFramework.ViewModels.IViewModelDescription,Caliburn.PresentationFramework.Conventions.IElementDescription)">
            <summary>
            Gets the applications.
            </summary>
            <param name="viewModelDescription">The view model description.</param>
            <param name="elementDescription">The element description.</param>
            <returns>The applications.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.DefaultViewConventionCategory`1.AddConvention(Caliburn.PresentationFramework.Conventions.IViewConvention{`0})">
            <summary>
            Adds the convention to this category.
            </summary>
            <param name="convention">The convention.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.Conventions.ItemsControlBindingConvention">
            <summary>
            An implemenation of <see cref="T:Caliburn.PresentationFramework.Conventions.IViewConvention`1"/> that bindings SelectedItem and Header for Selectors and HeaderedItemsControls respectively.
            ItemsTemplates may be conventionally added as well.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.ItemsControlBindingConvention.TryCreateApplication(Caliburn.PresentationFramework.ViewModels.IViewModelDescription,Caliburn.PresentationFramework.Conventions.IElementDescription,System.Reflection.PropertyInfo)">
            <summary>
            Creates the application of the convention.
            </summary>
            <param name="description">The description.</param>
            <param name="element">The element.</param>
            <param name="property">The property.</param>
            <returns>The convention application.</returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.Conventions.SubActionConvention">
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.Conventions.IViewConvention`1"/> that matches sub-actions.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Conventions.SubActionConvention.TryCreateApplication(Caliburn.PresentationFramework.ViewModels.IViewModelDescription,Caliburn.PresentationFramework.Conventions.IElementDescription,System.Reflection.PropertyInfo)">
            <summary>
            Tries to creates the application of the convention.
            </summary>
            <param name="description">The description.</param>
            <param name="element">The element.</param>
            <param name="target">The target.</param>
            <returns>
            The convention application, or null if not applicable
            </returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.Converters.EnumConverter">
            <summary>
            An <see cref="T:System.Windows.Data.IValueConverter"/> for <see cref="T:Caliburn.PresentationFramework.ViewModels.BindableEnum"/>.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Converters.EnumConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Converters.EnumConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.Filters.AutoCheckAvailabilityAttribute">
            <summary>
            A filter capable of updating trigger availability based on CommandManager notifications.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Filters.IHandlerAware">
            <summary>
            A filter that is aware individual <see cref="T:Caliburn.PresentationFramework.IMessageTrigger"/> and <see cref="T:Caliburn.PresentationFramework.IRoutedMessageHandler"/> instances.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.IHandlerAware.MakeAwareOf(Caliburn.PresentationFramework.IRoutedMessageHandler)">
            <summary>
            Makes the filter aware of the <see cref="T:Caliburn.PresentationFramework.IRoutedMessageHandler"/>.
            </summary>
            <param name="messageHandler">The message handler.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.IHandlerAware.MakeAwareOf(Caliburn.PresentationFramework.IRoutedMessageHandler,Caliburn.PresentationFramework.IMessageTrigger)">
            <summary>
            Makes the filter aware of the <see cref="T:Caliburn.PresentationFramework.IMessageTrigger"/>.
            </summary>
            <param name="messageHandler">The message handler.</param>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.AutoCheckAvailabilityAttribute.MakeAwareOf(Caliburn.PresentationFramework.IRoutedMessageHandler)">
            <summary>
            Makes the filter aware of the <see cref="T:Caliburn.PresentationFramework.IRoutedMessageHandler"/>.
            </summary>
            <param name="messageHandler">The message handler.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.AutoCheckAvailabilityAttribute.MakeAwareOf(Caliburn.PresentationFramework.IRoutedMessageHandler,Caliburn.PresentationFramework.IMessageTrigger)">
            <summary>
            Makes the filter aware of the <see cref="T:Caliburn.PresentationFramework.IMessageTrigger"/>.
            </summary>
            <param name="messageHandler">The message handler.</param>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.Filters.AutoCheckAvailabilityAttribute.Priority">
            <summary>
            Gets the priority used to order filters.
            </summary>
            <value>The order.</value>
            <remarks>Higher numbers are evaluated first.</remarks>
        </member>
        <member name="T:Caliburn.PresentationFramework.Filters.DependenciesAttribute">
            <summary>
            A filter capable of specifying the dependencies raised by an implementor of <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> which can cause a trigger's availability to be re-evaluated.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.DependenciesAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Filters.DependenciesAttribute"/> class.
            </summary>
            <param name="dependencies">The dependencies.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.DependenciesAttribute.Initialize(System.Type,Caliburn.Core.Metadata.IMetadataContainer,Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            Initializes the filter.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="metadataContainer">The metadata container.</param>
            <param name="serviceLocator">The serviceLocator.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.DependenciesAttribute.MakeAwareOf(Caliburn.PresentationFramework.IRoutedMessageHandler)">
            <summary>
            Makes the filter aware of the <see cref="T:Caliburn.PresentationFramework.IRoutedMessageHandler"/>.
            </summary>
            <param name="messageHandler">The message handler.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.DependenciesAttribute.MakeAwareOf(Caliburn.PresentationFramework.IRoutedMessageHandler,Caliburn.PresentationFramework.IMessageTrigger)">
            <summary>
            Makes the filter aware of the <see cref="T:Caliburn.PresentationFramework.IMessageTrigger"/>.
            </summary>
            <param name="messageHandler">The message handler.</param>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.Filters.DependenciesAttribute.Priority">
            <summary>
            Gets the priority used to order filters.
            </summary>
            <value>The order.</value>
            <remarks>Higher numbers are evaluated first.</remarks>
        </member>
        <member name="P:Caliburn.PresentationFramework.Filters.DependenciesAttribute.Dependencies">
            <summary>
            Gets the dependencies.
            </summary>
            <value>The dependencies.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Filters.DependencyObserver">
            <summary>
            Metadata which can be used to trigger availability changes in triggers based on <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.DependencyObserver.#ctor(Caliburn.PresentationFramework.IRoutedMessageHandler,Caliburn.Core.Invocation.IMethodFactory,System.ComponentModel.INotifyPropertyChanged)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Filters.DependencyObserver"/> class.
            </summary>
            <param name="messageHandler">The message handler.</param>
            <param name="methodFactory">The method factory.</param>
            <param name="notifier">The notifier.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.DependencyObserver.MakeAwareOf(Caliburn.PresentationFramework.IMessageTrigger,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Makes the metadata aware of the relationship between an <see cref="T:Caliburn.PresentationFramework.IMessageTrigger"/> and its dependencies.
            </summary>
            <param name="trigger">The trigger.</param>
            <param name="dependencies">The dependencies.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.Filters.FilterManager">
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.Filters.IFilterManager"/>.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Filters.IFilterManager">
            <summary>
            Manages filters for an object.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.IFilterManager.Add(Caliburn.PresentationFramework.Filters.IFilter)">
            <summary>
            Adds the specified filter.
            </summary>
            <param name="filter">The filter.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.IFilterManager.Combine(Caliburn.PresentationFramework.Filters.IFilterManager)">
            <summary>
            Combines the filters from the specified manager with the current instance.
            </summary>
            <param name="filterManager">The filter manager.</param>
            <returns>A new filter manager representing the filter combinations.</returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.Filters.IFilterManager.TriggerEffects">
            <summary>
            Gets the trigger affecting filters.
            </summary>
            <value>The trigger effects.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Filters.IFilterManager.PreProcessors">
            <summary>
            
            Gets the filters that execute before something else.
            </summary>
            <value>The pre execute.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Filters.IFilterManager.PostProcessors">
            <summary>
            Gets the filters that execute after something else.
            </summary>
            <value>The post execute.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Filters.IFilterManager.HandlerAware">
            <summary>
            Gets the instance aware filters.
            </summary>
            <value>The instance aware filters.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Filters.IFilterManager.Rescues">
            <summary>
            Gets a filter that performs a resuce.
            </summary>
            <value>The rescue.</value>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.FilterManager.#ctor(System.Type,Caliburn.Core.Metadata.IMetadataContainer,Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Filters.FilterManager"/> class.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="metadataContainer">The metadata container.</param>
            <param name="serviceLocator">The serviceLocator.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.FilterManager.#ctor(System.Type,Caliburn.Core.Metadata.IMetadataContainer,Microsoft.Practices.ServiceLocation.IServiceLocator,System.Collections.Generic.IEnumerable{Caliburn.PresentationFramework.Filters.IPreProcessor},System.Collections.Generic.IEnumerable{Caliburn.PresentationFramework.Filters.IPreProcessor},System.Collections.Generic.IEnumerable{Caliburn.PresentationFramework.Filters.IPostProcessor},System.Collections.Generic.IEnumerable{Caliburn.PresentationFramework.Filters.IHandlerAware},System.Collections.Generic.IEnumerable{Caliburn.PresentationFramework.Filters.IRescue})">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Filters.FilterManager"/> class.
            </summary>
            <param name="serviceLocator">The service locator.</param>
            <param name="preExecute">The pre execute.</param>
            <param name="triggerEffects">The trigger effects.</param>
            <param name="postExecute">The post execute.</param>
            <param name="instanceAwareFilters">The instance aware.</param>
            <param name="rescues">The rescues</param>
            <param name="targetType">The target type.</param>
            <param name="metadataContainer">The metadatacontainer.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.FilterManager.Add(Caliburn.PresentationFramework.Filters.IFilter)">
            <summary>
            Adds the specified filter.
            </summary>
            <param name="filter">The filter.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.FilterManager.Combine(Caliburn.PresentationFramework.Filters.IFilterManager)">
            <summary>
            Combines the filters from the specified manager with the current instance.
            </summary>
            <param name="filterManager">The filter manager.</param>
            <returns>A new filter manager representing the filter combinations.</returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.Filters.FilterManager.PreProcessors">
            <summary>
            Gets the filters that execute before something else.
            </summary>
            <value>The pre execute.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Filters.FilterManager.TriggerEffects">
            <summary>
            Gets the trigger affecting filters.
            </summary>
            <value>The trigger effects.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Filters.FilterManager.PostProcessors">
            <summary>
            Gets the filters that execute after something else.
            </summary>
            <value>The post execute.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Filters.FilterManager.HandlerAware">
            <summary>
            Gets the instance aware filters.
            </summary>
            <value>The instance aware filters.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Filters.FilterManager.Rescues">
            <summary>
            Gets a filter that performs a resuce.
            </summary>
            <value>The rescue.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Filters.IPreProcessor">
            <summary>
            A <see cref="T:Caliburn.PresentationFramework.Filters.IFilter"/> that is executing before something.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.IPreProcessor.Execute(Caliburn.PresentationFramework.IRoutedMessage,Caliburn.PresentationFramework.IInteractionNode,System.Object[])">
            <summary>
            Executes the filter.
            </summary>
            <param name="message">The message.</param>
            <param name="parameters">The parameters.</param>
            <param name="handlingNode">The handling node.</param>
            <returns></returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.Filters.IPreProcessor.AffectsTriggers">
            <summary>
            Gets a value indicating whether this filter affects triggers.
            </summary>
            <value><c>true</c> if affects triggers; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Filters.IRescue">
            <summary>
            A <see cref="T:Caliburn.PresentationFramework.Filters.IFilter"/> that performs a rescue.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.IRescue.Handle(Caliburn.PresentationFramework.IRoutedMessage,Caliburn.PresentationFramework.IInteractionNode,System.Exception)">
            <summary>
            Handles an <see cref="T:System.Exception"/>.
            </summary>
            <param name="exception">The exception.</param>
            <param name="message">The message.</param>
            <param name="handlingNode">The handling node.</param>
            <returns>true if the exception was handled, false otherwise</returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.Filters.MethodCallFilterBase">
            <summary>
            A base class for filters that make method calls.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Filters.MethodCallFilterBase._method">
            <summary>
            The method.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.MethodCallFilterBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Filters.MethodCallFilterBase"/> class.
            </summary>
            <param name="methodName">Name of the method.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.MethodCallFilterBase.#ctor(Caliburn.Core.Invocation.IMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Filters.MethodCallFilterBase"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.MethodCallFilterBase.Initialize(System.Type,Caliburn.Core.Metadata.IMetadataContainer,Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            Initializes the filter.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="metadataContainer">The metadata container.</param>
            <param name="serviceLocator">The serviceLocator.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.Filters.MethodCallFilterBase.Priority">
            <summary>
            Gets the order the filter will be evaluated in.
            </summary>
            <value>The order.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Filters.MethodCallFilterBase.MethodName">
            <summary>
            Gets the name of the method.
            </summary>
            <value>The name of the method.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Filters.MethodCallFilterBase.IsGetter">
            <summary>
            Indicates whether the preview method is actually a property getter.
            </summary>
            <value><c>true</c> if this instance points to a getter; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Filters.MethodCallFilterBase.Target">
            <summary>
            Gets the target.
            </summary>
            <value>The target.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Filters.PreviewAttribute">
            <summary>
            A basic pre execution filter.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.PreviewAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Filters.PreviewAttribute"/> class.
            </summary>
            <param name="methodName">Name of the method.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.PreviewAttribute.#ctor(Caliburn.Core.Invocation.IMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Filters.PreviewAttribute"/> class.
            </summary>
            <param name="method">The method.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.PreviewAttribute.Initialize(System.Type,Caliburn.Core.Metadata.IMetadataContainer,Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            Initializes the filter.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="metadataContainer">The metadata container.</param>
            <param name="serviceLocator">The serviceLocator.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.PreviewAttribute.Execute(Caliburn.PresentationFramework.IRoutedMessage,Caliburn.PresentationFramework.IInteractionNode,System.Object[])">
            <summary>
            Executes the filter.
            </summary>
            <param name="message">The message.</param>
            <param name="handlingNode">The handling node.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.PreviewAttribute.MakeAwareOf(Caliburn.PresentationFramework.IRoutedMessageHandler)">
            <summary>
            Makes the filter aware of the <see cref="T:Caliburn.PresentationFramework.IRoutedMessageHandler"/>.
            </summary>
            <param name="messageHandler">The message handler.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.PreviewAttribute.MakeAwareOf(Caliburn.PresentationFramework.IRoutedMessageHandler,Caliburn.PresentationFramework.IMessageTrigger)">
            <summary>
            Makes the filter aware of the <see cref="T:Caliburn.PresentationFramework.IMessageTrigger"/>.
            </summary>
            <param name="messageHandler">The message handler.</param>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.Filters.PreviewAttribute.AffectsTriggers">
            <summary>
            Gets a value indicating whether this filter affects triggers.
            </summary>
            <value><c>true</c> if affects triggers; otherwise, <c>false</c>.</value>
            <remarks>True by default.</remarks>
        </member>
        <member name="T:Caliburn.PresentationFramework.Filters.PropertyPathMonitor">
            <summary>
            A class used to monitor changes in a property path.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.PropertyPathMonitor.#ctor(Caliburn.Core.Invocation.IMethodFactory,System.ComponentModel.INotifyPropertyChanged,System.String,System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Filters.PropertyPathMonitor"/> class.
            </summary>
            <param name="methodFactory">The method factory.</param>
            <param name="notifier">The notifier.</param>
            <param name="propertyPath">The property path.</param>
            <param name="onPathChanged">The on path changed.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.PropertyPathMonitor.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Filters.RescueAttribute">
            <summary>
            A basic rescue filter.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.RescueAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Filters.RescueAttribute"/> class.
            </summary>
            <param name="methodName">Name of the method.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Filters.RescueAttribute.Handle(Caliburn.PresentationFramework.IRoutedMessage,Caliburn.PresentationFramework.IInteractionNode,System.Exception)">
            <summary>
            Handles an <see cref="T:System.Exception"/>.
            </summary>
            <param name="message">The message.</param>
            <param name="handlingNode">The handling node.</param>
            <param name="exception">The exception.</param>
            <returns>
            true if the exception was handled, false otherwise
            </returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.Invocation.BatchingDispatcher">
            <summary>
            An impelementation of <see cref="T:Caliburn.Core.Invocation.IDispatcher"/> that efficiently batches updates to the UI thread.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Invocation.BatchingDispatcher.#ctor(Caliburn.Core.Threading.IThreadPool)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Invocation.DispatcherImplementation"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Invocation.BatchingDispatcher.ExecuteOnBackgroundThread(System.Action,System.Action{Caliburn.Core.Threading.BackgroundTaskCompletedEventArgs},System.Action{Caliburn.Core.Threading.BackgroundTaskProgressChangedEventArgs})">
            <summary>
            Executes code on the background thread.
            </summary>
            <param name="backgroundAction">The background action.</param>
            <param name="uiCallback">The UI callback.</param>
            <param name="progressChanged">The progress change callback.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Invocation.BatchingDispatcher.ExecuteOnUIThread(System.Action)">
            <summary>
            Executes code on the UI thread.
            </summary>
            <param name="uiAction">The UI action.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Invocation.BatchingDispatcher.BeginExecuteOnUIThread(System.Action)">
            <summary>
            Executes code on the UI thread asynchronously.
            </summary>
            <param name="uiAction">The UI action.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.Invocation.DispatcherImplementation">
            <summary>
            An implementation of <see cref="T:Caliburn.Core.Invocation.IDispatcher"/> for WPF.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Invocation.DispatcherImplementation.#ctor(Caliburn.Core.Threading.IThreadPool)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Invocation.DispatcherImplementation"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Invocation.DispatcherImplementation.GetDispatcher">
            <summary>
            Gets the dispatcher.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Invocation.DispatcherImplementation.ExecuteOnBackgroundThread(System.Action,System.Action{Caliburn.Core.Threading.BackgroundTaskCompletedEventArgs},System.Action{Caliburn.Core.Threading.BackgroundTaskProgressChangedEventArgs})">
            <summary>
            Executes code on the background thread.
            </summary>
            <param name="backgroundAction">The background action.</param>
            <param name="uiCallback">The UI callback.</param>
            <param name="progressChanged">The progress change callback.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Invocation.DispatcherImplementation.ExecuteOnUIThread(System.Action)">
            <summary>
            Executes code on the UI thread.
            </summary>
            <param name="uiAction">The UI action.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Invocation.DispatcherImplementation.BeginExecuteOnUIThread(System.Action)">
            <summary>
            Executes code on the UI thread asynchronously.
            </summary>
            <param name="uiAction">The UI action.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.Invocation.DispatcherOperationProxy">
            <summary>
            An implemenation of <see cref="T:Caliburn.Core.Invocation.IDispatcherOperation"/>.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Invocation.DispatcherOperationProxy.#ctor(System.Windows.Threading.DispatcherOperation)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Invocation.DispatcherOperationProxy"/> class.
            </summary>
            <param name="operation">The operation.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Invocation.DispatcherOperationProxy.Abort">
            <summary>
            Aborts the operation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Invocation.DispatcherOperationProxy.Wait">
            <summary>
            Waits for the operation to complete
            </summary>
        </member>
        <member name="P:Caliburn.PresentationFramework.Invocation.DispatcherOperationProxy.Result">
            <summary>
            Gets the result of the operation after it has completed.
            </summary>
            <value>The result.</value>
        </member>
        <member name="E:Caliburn.PresentationFramework.Invocation.DispatcherOperationProxy.Aborted">
            <summary>
            Occurs when the operation is aborted.
            </summary>
        </member>
        <member name="E:Caliburn.PresentationFramework.Invocation.DispatcherOperationProxy.Completed">
            <summary>
            Occurs when the operation has completed.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Metadata.MetadataExtensions">
            <summary>
            Extension methods realted to metadata.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Metadata.MetadataExtensions.GetView``1(Caliburn.Core.Metadata.IMetadataContainer,System.Object)">
            <summary>
            Gets the view from metadata.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="container">The container.</param>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Metadata.MetadataExtensions.SetView(Caliburn.Core.Metadata.IMetadataContainer,System.Object,System.Object,System.Boolean)">
            <summary>
            Stores the view in metadata.
            </summary>
            <param name="container">The container.</param>
            <param name="view">The view.</param>
            <param name="context">The context.</param>
            <param name="useWeakReference">Indicates whether the view should be referenced weakly.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.Metadata.ViewMetadata">
            <summary>
            Metadata that stores the current view over a model.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Metadata.ViewMetadata.SetView(System.Object,System.Object,System.Boolean)">
            <summary>
            Sets the view.
            </summary>
            <param name="view">The view.</param>
            <param name="context">The context</param>
            <param name="useWeakReference">if set to <c>true</c> uses a weak reference.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Metadata.ViewMetadata.GetView``1(System.Object)">
            <summary>
            Gets a strongly typed view.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.Parsers.AttachedEventTriggerParser">
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.Parsers.ITriggerParser"/> that parses routed/attached events.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Parsers.ITriggerParser">
            <summary>
            Parses the trigger specific aspects of an <see cref="T:Caliburn.PresentationFramework.IMessageTrigger"/>.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Parsers.ITriggerParser.Parse(System.Windows.DependencyObject,System.String)">
            <summary>
            Parses the specified trigger text.
            </summary>
            <param name="target">The targeted ui element.</param>
            <param name="triggerText">The trigger text.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Parsers.AttachedEventTriggerParser.Parse(System.Windows.DependencyObject,System.String)">
            <summary>
            Parses the specified trigger text.
            </summary>
            <param name="target">The targeted ui element.</param>
            <param name="triggerText">The trigger text.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Parsers.AttachedEventTriggerParser.GetRoutedEvent(System.Windows.DependencyObject,System.String)">
            <summary>
            Locates the routed event.
            </summary>
            <param name="target">The target.</param>
            <param name="triggerText">The trigger text.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Parsers.AttachedEventTriggerParser.GetSearchableAssemblies">
            <summary>
            Gets the assemblies that should be inspected for routed events.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.Parsers.CommandTriggerParser">
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.Parsers.ITriggerParser"/> that parses command source hookups.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Parsers.CommandTriggerParser.Parse(System.Windows.DependencyObject,System.String)">
            <summary>
            Parses the specified trigger text.
            </summary>
            <param name="target">The targeted ui element.</param>
            <param name="triggerText">The trigger text.</param>
            <returns></returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.Parsers.DefaultParser">
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.Parsers.IParser"/>.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Parsers.IParser">
            <summary>
            Parses text into a fully functional <see cref="T:Caliburn.PresentationFramework.IMessageTrigger"/>.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Parsers.IParser.SetDefaultMessageParser(System.String)">
            <summary>
            Sets the default message parser.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Parsers.IParser.RegisterTriggerParser(System.String,Caliburn.PresentationFramework.Parsers.ITriggerParser)">
            <summary>
            Registers a trigger parser.
            </summary>
            <param name="key">The key.</param>
            <param name="parser">The parser.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Parsers.IParser.RegisterMessageParser(System.String,Caliburn.PresentationFramework.Parsers.IMessageParser)">
            <summary>
            Registers a message parser.
            </summary>
            <param name="key">The key.</param>
            <param name="parser">The parser.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Parsers.IParser.Parse(System.Windows.DependencyObject,System.String)">
            <summary>
            Parses the specified message text.
            </summary>
            <param name="target">The target.</param>
            <param name="messageText">The message text.</param>
            <returns>The triggers parsed from the text.</returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.Parsers.IParser.MessageDelimiter">
            <summary>
            Gets or sets the message delimiter.
            </summary>
            <value>The message delimiter.</value>
        </member>
        <member name="M:Caliburn.PresentationFramework.Parsers.DefaultParser.#ctor(Caliburn.PresentationFramework.Conventions.IConventionManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Parsers.DefaultParser"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Parsers.DefaultParser.SetDefaultMessageParser(System.String)">
            <summary>
            Sets the default message parser.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Parsers.DefaultParser.RegisterTriggerParser(System.String,Caliburn.PresentationFramework.Parsers.ITriggerParser)">
            <summary>
            Registers a trigger parser.
            </summary>
            <param name="key">The key.</param>
            <param name="parser">The parser.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Parsers.DefaultParser.RegisterMessageParser(System.String,Caliburn.PresentationFramework.Parsers.IMessageParser)">
            <summary>
            Registers a message parser.
            </summary>
            <param name="key">The key.</param>
            <param name="parser">The parser.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Parsers.DefaultParser.Parse(System.Windows.DependencyObject,System.String)">
            <summary>
            Parses the specified message text.
            </summary>
            <param name="target">The target.</param>
            <param name="messageText">The message text.</param>
            <returns>The triggers parsed from the text.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Parsers.DefaultParser.ParseMessage(System.String,System.Windows.DependencyObject)">
            <summary>
            Parses the specified message text.
            </summary>
            <param name="target">The target.</param>
            <param name="messageText">The message text.</param>
            <returns>The triggers parsed from the text.</returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.Parsers.DefaultParser.MessageDelimiter">
            <summary>
            Gets or sets the message delimiter.
            </summary>
            <value>The message delimiter.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Parsers.EventTriggerParser">
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.Parsers.ITriggerParser"/> that parses standard events.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Parsers.EventTriggerParser.Parse(System.Windows.DependencyObject,System.String)">
            <summary>
            Parses the specified trigger text.
            </summary>
            <param name="target">The targeted ui element.</param>
            <param name="triggerText">The trigger text.</param>
            <returns></returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.Parsers.GestureTriggerParser">
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.Parsers.ITriggerParser"/> that parses gestures.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Parsers.GestureTriggerParser.Parse(System.Windows.DependencyObject,System.String)">
            <summary>
            Parses the specified trigger text.
            </summary>
            <param name="target">The targeted ui element.</param>
            <param name="triggerText">The trigger text.</param>
            <returns></returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.Screens.IHierarchicalScreen">
            <summary>
            An <see cref="T:Caliburn.PresentationFramework.Screens.IScreen"/> that is aware of its position within a hierarchy.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Screens.IScreen">
            <summary>
            Implemented by screens.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.IScreen.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.IScreen.CanShutdown">
            <summary>
            Determines whether this instance can shutdown.
            </summary>
            <returns>
            	<c>true</c> if this instance can shutdown; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.IScreen.Shutdown">
            <summary>
            Shuts down this instance.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.IScreen.Activate">
            <summary>
            Activates this instance.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.IScreen.Deactivate">
            <summary>
            Deactivates this instance.
            </summary>
        </member>
        <member name="P:Caliburn.PresentationFramework.Screens.IScreen.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Screens.IHierarchicalScreen.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Screens.INavigator">
            <summary>
            An <see cref="T:Caliburn.PresentationFramework.Screens.IScreenConductor"/> that also has basic navigation abilities.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Screens.IScreenConductor">
            <summary>
            An <see cref="T:Caliburn.PresentationFramework.Screens.IScreen"/> capable of conducting other screens.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Screens.IScreenCollection">
            <summary>
            Represents an <see cref="T:Caliburn.PresentationFramework.Screens.IScreen"/> that hosts other instances of <see cref="T:Caliburn.PresentationFramework.Screens.IScreen"/>.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.IScreenCollection.OpenScreen(Caliburn.PresentationFramework.Screens.IScreen,System.Action{System.Boolean})">
            <summary>
            Opens the specified screen.
            </summary>
            <param name="screen">The screen.</param>
            <param name="completed">Called when the open action is finished.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.IScreenCollection.ShutdownScreen(Caliburn.PresentationFramework.Screens.IScreen,System.Action{System.Boolean})">
            <summary>
            Shuts down the specified screen.
            </summary>
            <param name="screen">The screen.</param>
            <param name="completed">Called when the open action is finished.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.Screens.IScreenCollection.Screens">
            <summary>
            Gets the screens that are currently managed.
            </summary>
            <value>The presenters.</value>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.IScreenConductor.ShutdownActiveScreen(System.Action{System.Boolean})">
            <summary>
            Shuts down the active screen.
            </summary>
        </member>
        <member name="P:Caliburn.PresentationFramework.Screens.IScreenConductor.ActiveScreen">
            <summary>
            Gets or sets the active screen.
            </summary>
            <value>The active screen.</value>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.INavigator.Forward(System.Action{System.Boolean})">
            <summary>
            Navigates forward.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.INavigator.Back(System.Action{System.Boolean})">
            <summary>
            Navigates back.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.INavigator.Navigate(System.Action{System.Action{System.Boolean}},System.Action{System.Boolean})">
            <summary>
            Navigates using the specified action.
            </summary>
            <param name="function">The function.</param>
            <param name="completed">Called when navigation is completed.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.INavigator.ClearHistory">
            <summary>
            Clears the navigation history.
            </summary>
        </member>
        <member name="P:Caliburn.PresentationFramework.Screens.INavigator.CanGoBack">
            <summary>
            Gets a value indicating whether this instance can navigate back.
            </summary>
            <value>
            	<c>true</c> if this instance can go back; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Screens.INavigator.CanGoForward">
            <summary>
            Gets a value indicating whether this instance can navigate forward.
            </summary>
            <value>
            	<c>true</c> if this instance can go forward; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Screens.INavigator`1">
            <summary>
            An <see cref="T:Caliburn.PresentationFramework.Screens.IScreenConductor"/> that also has basic navigation abilities.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Screens.IScreenConductor`1">
            <summary>
            A generic version of <see cref="T:Caliburn.PresentationFramework.Screens.IScreenConductor"/>.
            </summary>
            <typeparam name="T">The type of screen being conducted.</typeparam>
        </member>
        <member name="T:Caliburn.PresentationFramework.Screens.IScreenCollection`1">
            <summary>
            Represents an <see cref="T:Caliburn.PresentationFramework.Screens.IScreen"/> that hosts other instances of <see cref="T:Caliburn.PresentationFramework.Screens.IScreen"/>.
            </summary>
            <typeparam name="T">The type of screens in the collection.</typeparam>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.IScreenCollection`1.OpenScreen(`0,System.Action{System.Boolean})">
            <summary>
            Opens the specified screen.
            </summary>
            <param name="screen">The screen.</param>
            <param name="completed">Called when the open action is finished.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.IScreenCollection`1.ShutdownScreen(`0,System.Action{System.Boolean})">
            <summary>
            Shuts down the specified screen.
            </summary>
            <param name="screen">The screen.</param>
            <param name="completed">Called when the open action is finished.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.Screens.IScreenCollection`1.Screens">
            <summary>
            Gets the screens that are currently managed.
            </summary>
            <value>The screens.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Screens.IScreenConductor`1.ActiveScreen">
            <summary>
            Gets or sets the active screen.
            </summary>
            <value>The active screen.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Screens.IScreen`1">
            <summary>
            A screen with a subject.
            </summary>
            <typeparam name="T">The subject's type.</typeparam>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.IScreen`1.WithSubject(`0)">
            <summary>
            Configures the screen with the subject.
            </summary>
            <param name="subject">The subject.</param>
            <returns>Self</returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.Screens.IScreen`1.Subject">
            <summary>
            Gets the subject.
            </summary>
            <value>The subject.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Screens.IScreenEx">
            <summary>
            An <see cref="T:Caliburn.PresentationFramework.Screens.IScreen"/> which also implements <see cref="T:Caliburn.Core.Metadata.IMetadataContainer"/>, <see cref="T:Caliburn.PresentationFramework.Screens.IHierarchicalScreen"/>, <see cref="T:Caliburn.PresentationFramework.ApplicationModel.ILifecycleNotifier"/> and <see cref="T:Caliburn.PresentationFramework.ViewModels.IViewAware"/>.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.ViewModels.IViewAware">
            <summary>
            Indicates that a model should be made aware of its view.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.IViewAware.ViewLoaded(System.Windows.DependencyObject,System.Object)">
            <summary>
            Called when the implementor's view is loaded.
            </summary>
            <param name="view">The view.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.IScreenEx.Close">
            <summary>
            Tries to close this screen.
            </summary>
        </member>
        <member name="P:Caliburn.PresentationFramework.Screens.IScreenEx.IsInitialized">
            <summary>
            Gets or sets a value indicating whether this instance is initialized.
            </summary>
            <value>
            	<c>true</c> if this instance is initialized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Screens.IScreenEx.IsActive">
            <summary>
            Gets or sets a value indicating whether this instance is active.
            </summary>
            <value><c>true</c> if this instance is active; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Screens.IScreenSubject">
            <summary>
            Matches screens with the same "subject" and is capable of creating screens for the encapsulated subject.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.IScreenSubject.Matches(Caliburn.PresentationFramework.Screens.IScreen)">
            <summary>
            Determines if the specified screen matches this subject.
            </summary>
            <param name="screen">The screen.</param>
            <returns><c>true</c> if the screen matches the subject; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.IScreenSubject.CreateScreen(Caliburn.PresentationFramework.ViewModels.IViewModelFactory,System.Action{Caliburn.PresentationFramework.Screens.IScreen})">
            <summary>
            Creates the screen.
            </summary>
            <param name="factory">The factory.</param>
            <param name="constructionComplete">The construction completion callback.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.Screens.Navigator`1">
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.Screens.INavigator"/>.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Screens.ScreenConductor`1">
            <summary>
            A base implementation of <see cref="T:Caliburn.PresentationFramework.Screens.IScreenConductor"/>.
            </summary>
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.Screens.IScreenConductor"/>.
            </summary>
            <typeparam name="T">A type of <see cref="T:Caliburn.PresentationFramework.Screens.IScreen"/>.</typeparam>
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.Screens.IScreenConductor"/>.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Screens.ScreenConductorBase`1">
            <summary>
            An baseclass for implementations of <see cref="T:Caliburn.PresentationFramework.Screens.IScreenConductor"/>.
            </summary>
            <typeparam name="T">A type of <see cref="T:Caliburn.PresentationFramework.Screens.IScreen"/>.</typeparam>
        </member>
        <member name="T:Caliburn.PresentationFramework.Screens.ScreenCollectionBase`1">
            <summary>
            An baseclass for implementations of <see cref="T:Caliburn.PresentationFramework.Screens.IScreenCollection"/>.
            </summary>
            <typeparam name="T">A type of <see cref="T:Caliburn.PresentationFramework.Screens.IScreen"/>.</typeparam>
        </member>
        <member name="T:Caliburn.PresentationFramework.Screens.ScreenBase">
            <summary>
            Implements common functionality used by all implementors of <see cref="T:Caliburn.PresentationFramework.Screens.IScreen"/>.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Screens.ScreenBase"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenBase.CanShutdown">
            <summary>
            Determines whether this instance can shutdown.
            </summary>
            <returns>
            	<c>true</c> if this instance can shutdown; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenBase.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenBase.Shutdown">
            <summary>
            Shuts down this instance.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenBase.Activate">
            <summary>
            Activates this instance.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenBase.Deactivate">
            <summary>
            Deactivates this instance.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenBase.OnInitialize">
            <summary>
            Called when [initialize].
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenBase.CanShutdownCore">
            <summary>
            Determines whether this instance can shutdown.
            </summary>
            <returns>
            	<c>true</c> if this instance can shutdown; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenBase.OnShutdown">
            <summary>
            Called when [shutdown].
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenBase.OnActivate">
            <summary>
            Called when [activate].
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenBase.OnDeactivate">
            <summary>
            Called when [deactivate].
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenBase.ViewLoaded(System.Windows.DependencyObject,System.Object)">
            <summary>
            Called when the screen's view is loaded.
            </summary>
            <param name="view">The view.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenBase.Close">
            <summary>
            Closes this instance by asking its Parent to initiate shutdown or by asking it's corresponding default view to close.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenBase.Close(System.Nullable{System.Boolean})">
            <summary>
            Closes this instance by asking its Parent to initiate shutdown or by asking it's corresponding default view to close.
            This overload also provides an opportunity to pass a dialog result to it's corresponding default view.
            </summary>
            <param name="dialogResult">The dialog result.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.Screens.ScreenBase.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Screens.ScreenBase.IsInitialized">
            <summary>
            Gets or sets a value indicating whether this instance is initialized.
            </summary>
            <value>
            	<c>true</c> if this instance is initialized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Screens.ScreenBase.IsActive">
            <summary>
            Gets or sets a value indicating whether this instance is active.
            </summary>
            <value><c>true</c> if this instance is active; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Screens.ScreenBase.DisplayName">
            <summary>
            Gets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="E:Caliburn.PresentationFramework.Screens.ScreenBase.Initialized">
            <summary>
            Occurs when [initialized].
            </summary>
        </member>
        <member name="E:Caliburn.PresentationFramework.Screens.ScreenBase.AttemptingShutdown">
            <summary>
            Occurs before attempting to shutdown.
            </summary>
        </member>
        <member name="E:Caliburn.PresentationFramework.Screens.ScreenBase.WasShutdown">
            <summary>
            Occurs when [was shutdown].
            </summary>
        </member>
        <member name="E:Caliburn.PresentationFramework.Screens.ScreenBase.Activated">
            <summary>
            Occurs when [activated].
            </summary>
        </member>
        <member name="E:Caliburn.PresentationFramework.Screens.ScreenBase.Deactivated">
            <summary>
            Occurs when [deactivated].
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenCollectionBase`1.OpenScreen(`0,System.Action{System.Boolean})">
            <summary>
            Opens the specified screen.
            </summary>
            <param name="screen">The screen.</param>
            <param name="completed">Called when the open action is finished.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenCollectionBase`1.Caliburn#PresentationFramework#Screens#IScreenCollection#OpenScreen(Caliburn.PresentationFramework.Screens.IScreen,System.Action{System.Boolean})">
            <summary>
            Opens the specified screen.
            </summary>
            <param name="screen">The screen.</param>
            <param name="completed">Called when the open action is finished.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenCollectionBase`1.ShutdownScreen(`0,System.Action{System.Boolean})">
            <summary>
            Shuts down the specified screen.
            </summary>
            <param name="screen">The screen.</param>
            <param name="completed">Called when the open action is finished.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenCollectionBase`1.Caliburn#PresentationFramework#Screens#IScreenCollection#ShutdownScreen(Caliburn.PresentationFramework.Screens.IScreen,System.Action{System.Boolean})">
            <summary>
            Shuts down the specified screen.
            </summary>
            <param name="screen">The screen.</param>
            <param name="completed">Called when the open action is finished.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenCollectionBase`1.CreateShutdownModel">
            <summary>
            Creates the shutdown model.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenCollectionBase`1.CanShutdown(Caliburn.PresentationFramework.ApplicationModel.ISubordinate)">
            <summary>
            Determines whether this instance can shutdown based on the evaluated shutdown model.
            </summary>
            <param name="shutdownModel">The shutdown model.</param>
            <returns>
            	<c>true</c> if this instance can shutdown; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenCollectionBase`1.CanShutdownScreen(Caliburn.PresentationFramework.Screens.IScreen,System.Action{System.Boolean})">
            <summary>
            Determines if the specified screen can be shut down.
            </summary>
            <param name="screen">The screen.</param>
            <param name="completed">Called when the shutdown action is finished.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenCollectionBase`1.ExecuteShutdownModel(Caliburn.PresentationFramework.ApplicationModel.ISubordinate,System.Action)">
            <summary>
            Inheritors should override this method if they intend to handle advanced shutdown scenarios.
            </summary>
            <param name="model">The model.</param>
            <param name="completed">Called when the shutdown model is finished executing.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.Screens.ScreenCollectionBase`1.Screens">
            <summary>
            Gets the screens that are currently managed.
            </summary>
            <value>The screens.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Screens.ScreenCollectionBase`1.Caliburn#PresentationFramework#Screens#IScreenCollection#Screens">
            <summary>
            Gets the screens that are currently managed.
            </summary>
            <value>The screens.</value>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenConductorBase`1.ShutdownActiveScreen(System.Action{System.Boolean})">
            <summary>
            Shuts down the active screen.
            </summary>
            <param name="completed"></param>
        </member>
        <member name="P:Caliburn.PresentationFramework.Screens.ScreenConductorBase`1.ActiveScreen">
            <summary>
            Gets or sets the active screen.
            </summary>
            <value>The active screen.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Screens.ScreenConductorBase`1.Caliburn#PresentationFramework#Screens#IScreenConductor#ActiveScreen">
            <summary>
            Gets or sets the active screen.
            </summary>
            <value>The active screen.</value>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenConductor`1.CanShutdown">
            <summary>
            Determines whether this instance can shutdown.
            </summary>
            <returns>
            	<c>true</c> if this instance can shutdown; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenConductor`1.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenConductor`1.Shutdown">
            <summary>
            Shuts down this instance.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenConductor`1.Activate">
            <summary>
            Activates this instance.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenConductor`1.Deactivate">
            <summary>
            Deactivates this instance.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenConductor`1.OpenScreen(`0,System.Action{System.Boolean})">
            <summary>
            Opens the specified screen.
            </summary>
            <param name="screen">The screen.</param>
            <param name="completed">Called when the open action is finished.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenConductor`1.ShutdownScreen(`0,System.Action{System.Boolean})">
            <summary>
            Shuts down the specified screen.
            </summary>
            <param name="screen">The screen.</param>
            <param name="completed">Called when the open action is finished.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenConductor`1.ShutdownActiveScreen(System.Action{System.Boolean})">
            <summary>
            Shuts down the active screen.
            </summary>
            <param name="completed">Called when the shutdown action is finished.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenConductor`1.ChangeActiveScreenCore(`0)">
            <summary>
            Changes the active screen.
            </summary>
            <param name="newActiveScreen">The new active screen.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenConductor`1.CreateShutdownModel">
            <summary>
            Creates the shutdown model.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenConductor`1.CanShutdown(Caliburn.PresentationFramework.ApplicationModel.ISubordinate)">
            <summary>
            Determines whether this instance can shutdown based on the evaluated shutdown model.
            </summary>
            <param name="shutdownModel">The shutdown model.</param>
            <returns>
            	<c>true</c> if this instance can shutdown; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.Screens.ScreenConductor`1.Screens">
            <summary>
            Gets the screens that are currently conducted.
            </summary>
            <value>The screens.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Screens.ScreenConductor`1.ActiveScreen">
            <summary>
            Gets or sets the active screen.
            </summary>
            <value>The active screen.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Screens.ScreenConductor`1.WithCollection">
            <summary>
            A class container for implementations of <see cref="T:Caliburn.PresentationFramework.Screens.IScreenConductor"/> that use a screen collection.
            </summary>
            <summary>
            A class container for implementations of <see cref="T:Caliburn.PresentationFramework.Screens.IScreenConductor"/> that use a screen collection.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Screens.ScreenConductor`1.WithCollection.AllScreensActive">
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.Screens.IScreenCollection"/> that activates/deactivates all child screens together.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenConductor`1.WithCollection.AllScreensActive.CanShutdown">
            <summary>
            Determines whether this instance can shutdown.
            </summary>
            <returns>
            	<c>true</c> if this instance can shutdown; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenConductor`1.WithCollection.AllScreensActive.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenConductor`1.WithCollection.AllScreensActive.Shutdown">
            <summary>
            Shutdowns this instance.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenConductor`1.WithCollection.AllScreensActive.Activate">
            <summary>
            Activates this instance.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenConductor`1.WithCollection.AllScreensActive.Deactivate">
            <summary>
            Deactivates this instance.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenConductor`1.WithCollection.AllScreensActive.OpenScreen(`0,System.Action{System.Boolean})">
            <summary>
            Opens the specified screen.
            </summary>
            <param name="screen">The presenter.</param>
            <param name="completed">Called when the open action is finished.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenConductor`1.WithCollection.AllScreensActive.ShutdownScreen(`0,System.Action{System.Boolean})">
            <summary>
            Shuts down the specified screen.
            </summary>
            <param name="screen">The screen.</param>
            <param name="completed">Called when the open action is finished.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenConductor`1.WithCollection.AllScreensActive.CreateShutdownModel">
            <summary>
            Creates the shutdown model.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenConductor`1.WithCollection.AllScreensActive.CanShutdown(Caliburn.PresentationFramework.ApplicationModel.ISubordinate)">
            <summary>
            Determines whether this instance can shutdown based on the evaluated shutdown model.
            </summary>
            <param name="shutdownModel">The shutdown model.</param>
            <returns>
            	<c>true</c> if this instance can shutdown; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenConductor`1.WithCollection.AllScreensActive.FinalizeShutdown(System.Boolean,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Finalizes the shutdown of some or all child screens.
            </summary>
            <param name="canShutdown">if set to <c>true</c> all screens in the Screen Collection can shutdown.</param>
            <param name="allowedToShutdown">Only the screens which are allowed to shutdown.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.Screens.ScreenConductor`1.WithCollection.AllScreensActive.Screens">
            <summary>
            Gets the screens that are currently managed.
            </summary>
            <value>The screens.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Screens.ScreenConductor`1.WithCollection.OneScreenActive">
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.Screens.IScreenConductor"/> that allows only one screen to be active at a time.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenConductor`1.WithCollection.OneScreenActive.CanShutdown">
            <summary>
            Determines whether this instance can shutdown.
            </summary>
            <returns>
            	<c>true</c> if this instance can shutdown; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenConductor`1.WithCollection.OneScreenActive.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenConductor`1.WithCollection.OneScreenActive.Shutdown">
            <summary>
            Shutdowns this instance.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenConductor`1.WithCollection.OneScreenActive.Activate">
            <summary>
            Activates this instance.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenConductor`1.WithCollection.OneScreenActive.Deactivate">
            <summary>
            Deactivates this instance.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenConductor`1.WithCollection.OneScreenActive.OpenScreen(`0,System.Action{System.Boolean})">
            <summary>
            Opens the specified screen.
            </summary>
            <param name="screen">The screen.</param>
            <param name="completed">Called when the open action is finished.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenConductor`1.WithCollection.OneScreenActive.ShutdownActiveScreen(System.Action{System.Boolean})">
            <summary>
            Shuts down the active screen.
            </summary>
            <param name="completed">Called when the shutdown action is finished.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenConductor`1.WithCollection.OneScreenActive.DetermineNextScreenToActivate(System.Int32)">
            <summary>
            Gets the next screen to activate after another screen is shutdown.
            </summary>
            <param name="lastIndex">The index of the previously removed screen.</param>
            <returns>The screen to activate or null if none.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenConductor`1.WithCollection.OneScreenActive.ShutdownScreen(`0,System.Action{System.Boolean})">
            <summary>
            Shuts down the specified screen.
            </summary>
            <param name="screen">The screen.</param>
            <param name="completed">Called when the shutdown action is finished.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenConductor`1.WithCollection.OneScreenActive.ChangeActiveScreenCore(`0)">
            <summary>
            Changes the active screen.
            </summary>
            <param name="newActiveScreen">The new current presenter.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenConductor`1.WithCollection.OneScreenActive.CreateShutdownModel">
            <summary>
            Creates the shutdown model.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenConductor`1.WithCollection.OneScreenActive.CanShutdown(Caliburn.PresentationFramework.ApplicationModel.ISubordinate)">
            <summary>
            Determines whether this instance can shutdown based on the evaluated shutdown model.
            </summary>
            <param name="shutdownModel">The shutdown model.</param>
            <returns>
            	<c>true</c> if this instance can shutdown; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenConductor`1.WithCollection.OneScreenActive.FinalizeShutdown(System.Boolean,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Finalizes the shutdown of some or all child screens.
            </summary>
            <param name="canShutdown">if set to <c>true</c> all screens in the Screen collection can shutdown.</param>
            <param name="allowedToShutdown">Only the screens which are allowed to shutdown.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.Screens.ScreenConductor`1.WithCollection.OneScreenActive.ActiveScreen">
            <summary>
            Gets or sets the active screen.
            </summary>
            <value>The active screen.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Screens.ScreenConductor`1.WithCollection.OneScreenActive.Screens">
            <summary>
            Gets the presenters that are currently managed.
            </summary>
            <value>The presenters.</value>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.Navigator`1.Forward(System.Action{System.Boolean})">
            <summary>
            Navigates forward.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.Navigator`1.Back(System.Action{System.Boolean})">
            <summary>
            Navigates back.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.Navigator`1.Navigate(System.Action{System.Action{System.Boolean}},System.Action{System.Boolean})">
            <summary>
            Navigates using the specified action.
            </summary>
            <param name="function">The function.</param>
            <param name="completed">Called when navigation is completed.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.Navigator`1.ClearHistory">
            <summary>
            Clears the navigation history.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.Navigator`1.Forward">
            <summary>
            Navigates forward.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.Navigator`1.Back">
            <summary>
            Navigates back.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.Navigator`1.ChangeActiveScreenCore(`0)">
            <summary>
            Changes the active screen.
            </summary>
            <param name="newActiveScreen">The new active screen.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.Navigator`1.RaiseChangeNotifications">
            <summary>
            Raises all related change notifications for the Navigator.
            </summary>
        </member>
        <member name="P:Caliburn.PresentationFramework.Screens.Navigator`1.CanClearHistory">
            <summary>
            Gets a value indicating whether the history can be cleared.
            </summary>
            <value>
            	<c>true</c> if the history can be cleared; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Screens.Navigator`1.Count">
            <summary>
            Gets the total number of actions tracked by the navigator 
            </summary>
        </member>
        <member name="P:Caliburn.PresentationFramework.Screens.Navigator`1.CurrentPosition">
            <summary>
            Gets the position of the current action
            </summary>
            <remarks>
            This is intended for display within a UI.
            </remarks>
        </member>
        <member name="P:Caliburn.PresentationFramework.Screens.Navigator`1.CanGoBack">
            <summary>
            Gets a value indicating whether this instance can navigate back.
            </summary>
            <value>
            	<c>true</c> if this instance can go back; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Screens.Navigator`1.CanGoForward">
            <summary>
            Gets a value indicating whether this instance can navigate forward.
            </summary>
            <value>
            	<c>true</c> if this instance can go forward; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Screens.Screen">
            <summary>
            A base implementation of <see cref="T:Caliburn.PresentationFramework.Screens.IScreen"/> and <see cref="T:Caliburn.PresentationFramework.Screens.IScreenEx"/>.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.Screen.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.Screen.Shutdown">
            <summary>
            Shutdowns this instance.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.Screen.Activate">
            <summary>
            Activates this instance.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.Screen.Deactivate">
            <summary>
            Deactivates this instance.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Screens.Screen`1">
            <summary>
            A basic implementation of <see cref="T:Caliburn.PresentationFramework.Screens.IScreen`1"/>
            </summary>
            <typeparam name="T">The screen's type.</typeparam>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.Screen`1.WithSubject(`0)">
            <summary>
            Configures the screen with the subject.
            </summary>
            <param name="subject">The subject.</param>
            <returns>Self</returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.Screens.Screen`1.Subject">
            <summary>
            Gets the subject.
            </summary>
            <value>The subject.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Screens.ScreenExtensions">
            <summary>
            Hosts extension methods for <see cref="T:Caliburn.PresentationFramework.Screens.IScreen"/> classes.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenExtensions.Initialize(Caliburn.PresentationFramework.ViewModels.IViewModelFactory)">
            <summary>
            Initializes the extensions with the specified view model factory.
            </summary>
            <param name="viewModelFactory">The view model factory.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenExtensions.OpenScreen(Caliburn.PresentationFramework.Screens.IScreenCollection,Caliburn.PresentationFramework.Screens.IScreenSubject)">
            <summary>
            Opens the specified screen.
            </summary>
            <param name="collection">The screen collection.</param>
            <param name="subject">The subject.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenExtensions.OpenScreen(Caliburn.PresentationFramework.Screens.IScreenCollection,Caliburn.PresentationFramework.Screens.IScreenSubject,System.Action{System.Boolean})">
            <summary>
            Opens the specified screen.
            </summary>
            <param name="collection">The screen collection.</param>
            <param name="subject">The subject.</param>
            <param name="completed">Completion callback.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenExtensions.OpenScreen``1(Caliburn.PresentationFramework.Screens.IScreenCollection{``0},``0)">
            <summary>
            Opens the specified screen.
            </summary>
            <param name="collection">The screen collection.</param>
            <param name="screen">The screen.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenExtensions.ShutdownScreen``1(Caliburn.PresentationFramework.Screens.IScreenCollection{``0},``0)">
            <summary>
            Shuts down the specified screen.
            </summary>
            <param name="collection">The screen collection owning the screen to shutdown.</param>
            <param name="screen">The screen.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenExtensions.ShutdownScreen(Caliburn.PresentationFramework.Screens.IScreenCollection,Caliburn.PresentationFramework.Screens.IScreen)">
            <summary>
            Shuts down the specified screen.
            </summary>
            <param name="collection">The screen collection owning the screen to shutdown.</param>
            <param name="screen">The screen.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenExtensions.ShutdownActiveScreen(Caliburn.PresentationFramework.Screens.IScreenConductor)">
            <summary>
            Shuts down the active screen.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenExtensions.Back(Caliburn.PresentationFramework.Screens.INavigator)">
            <summary>
            Navigates back.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenExtensions.Forward(Caliburn.PresentationFramework.Screens.INavigator)">
            <summary>
            Navigates forward.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenExtensions.Navigate(Caliburn.PresentationFramework.Screens.INavigator,System.Action{System.Action{System.Boolean}})">
            <summary>
            Navigates using the specified action.
            </summary>
            <param name="navigator">The navigator.</param>
            <param name="function">The function.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.Screens.ScreenSubject`1">
            <summary>
            A simple implementation of <see cref="T:Caliburn.PresentationFramework.Screens.IScreenSubject"/>.
            </summary>
            <typeparam name="T">The screen subject's type.</typeparam>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenSubject`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Screens.ScreenSubject`1"/> class.
            </summary>
            <param name="subject">The subject.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenSubject`1.Matches(Caliburn.PresentationFramework.Screens.IScreen)">
            <summary>
            Determines if the specified screen matches this subject.
            </summary>
            <param name="screen">The screen.</param>
            <returns>
            	<c>true</c> if the screen matches the subject; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenSubject`1.CreateScreen(Caliburn.PresentationFramework.ViewModels.IViewModelFactory,System.Action{Caliburn.PresentationFramework.Screens.IScreen})">
            <summary>
            Creates the screen.
            </summary>
            <param name="factory">The factory.</param>
            <param name="constructionComplete">The construction completion callback.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenSubject`1.Equals(Caliburn.PresentationFramework.Screens.ScreenSubject{`0})">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result of the equality check.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenSubject`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Caliburn.PresentationFramework.Screens.ScreenSubject`1.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.Triggers.Support.UnrestrictedKeyGesture">
            <summary>
            This is an import of System.Windows.Input.KeyGesture, with the validation behaviour disabled.
            </summary>
            <remarks>
            The default KeyGesture supplied with WPF is hard-coded to validate the key combination, and does
            so based on an arbitary rule to disallow any alpha-numeric keys without modifiers. This decision
            makes it very difficult to create a mouseless application with WPF and Caliburn.
            </remarks>
        </member>
        <member name="M:Caliburn.PresentationFramework.Triggers.Support.UnrestrictedKeyGesture.#ctor(System.Windows.Input.Key)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Triggers.Support.UnrestrictedKeyGesture"/> class.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Triggers.Support.UnrestrictedKeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Triggers.Support.UnrestrictedKeyGesture"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="modifiers">The modifiers.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Triggers.Support.UnrestrictedKeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Triggers.Support.UnrestrictedKeyGesture"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="modifiers">The modifiers.</param>
            <param name="validateGesture">if set to <c>true</c> [validate gesture].</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Triggers.Support.UnrestrictedKeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Triggers.Support.UnrestrictedKeyGesture"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="modifiers">The modifiers.</param>
            <param name="displayString">The display string.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Triggers.Support.UnrestrictedKeyGesture.GetDisplayStringForCulture(System.Globalization.CultureInfo)">
            <summary>
            Gets the display string for culture.
            </summary>
            <param name="culture">The culture.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Triggers.Support.UnrestrictedKeyGesture.Matches(System.Object,System.Windows.Input.InputEventArgs)">
            <summary>
            When overridden in a derived class, determines whether the specified <see cref="T:System.Windows.Input.InputGesture"/> matches the input associated with the specified <see cref="T:System.Windows.Input.InputEventArgs"/> object.
            </summary>
            <param name="targetElement">The target of the command.</param>
            <param name="inputEventArgs">The input event data to compare this gesture to.</param>
            <returns>
            true if the gesture matches the input; otherwise, false.
            </returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.Triggers.Support.UnrestrictedKeyGesture.DisplayString">
            <summary>
            Gets the display string.
            </summary>
            <value>The display string.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Triggers.Support.UnrestrictedKeyGesture.Key">
            <summary>
            Gets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Triggers.Support.UnrestrictedKeyGesture.Modifiers">
            <summary>
            Gets the modifiers.
            </summary>
            <value>The modifiers.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Triggers.Support.UnrestrictedKeyGestureConverter">
            <summary>
            This is an import of System.Windows.Input.KeyGestureConverter, unmodified except for references
            to KeyGesture replaced with UnrestrictedKeyGesture.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Triggers.Support.UnrestrictedKeyGestureConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Triggers.Support.UnrestrictedKeyGestureConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Triggers.Support.UnrestrictedKeyGestureConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts from.
            </summary>
            <param name="context">The context.</param>
            <param name="culture">The culture.</param>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Triggers.Support.UnrestrictedKeyGestureConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="T:Caliburn.PresentationFramework.Triggers.Support.UnrestrictedKeyGestureValueSerializer">
            <summary>
            This is an import of System.Windows.Input.KeyGestureValueSerializer, unmodified except for references
            to KeyGesture replaced with UnrestrictedKeyGesture.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Triggers.Support.UnrestrictedKeyGestureValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
            <summary>
            Determines whether the specified <see cref="T:System.String"/> can be converted to an instance of the type that the implementation of <see cref="T:System.Windows.Markup.ValueSerializer"/> supports.
            </summary>
            <param name="value">String to evaluate for conversion.</param>
            <param name="context">Context information that is used for conversion.</param>
            <returns>
            true if the value can be converted; otherwise, false.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Triggers.Support.UnrestrictedKeyGestureValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
            <summary>
            Determines whether the specified object can be converted into a <see cref="T:System.String"/>.
            </summary>
            <param name="value">The object to evaluate for conversion.</param>
            <param name="context">Context information that is used for conversion.</param>
            <returns>
            true if the <paramref name="value"/> can be converted into a <see cref="T:System.String"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Triggers.Support.UnrestrictedKeyGestureValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
            <summary>
            Converts a <see cref="T:System.String"/> to an instance of the type that the implementation of <see cref="T:System.Windows.Markup.ValueSerializer"/> supports.
            </summary>
            <param name="value">The string to convert.</param>
            <param name="context">Context information that is used for conversion.</param>
            <returns>
            A new instance of the type that the implementation of <see cref="T:System.Windows.Markup.ValueSerializer"/> supports based on the supplied <paramref name="value"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            	<paramref name="value"/> cannot be converted.
            </exception>
        </member>
        <member name="M:Caliburn.PresentationFramework.Triggers.Support.UnrestrictedKeyGestureValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
            <summary>
            Converts the specified object to a <see cref="T:System.String"/>.
            </summary>
            <param name="value">The object to convert into a string.</param>
            <param name="context">Context information that is used for conversion.</param>
            <returns>
            A string representation of the specified object.
            </returns>
            <exception cref="T:System.NotSupportedException">
            	<paramref name="value"/> cannot be converted.
            </exception>
        </member>
        <member name="T:Caliburn.PresentationFramework.Triggers.AttachedEventMessageTrigger">
            <summary>
            A message trigger that triggers by routed/attached events.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.BaseMessageTrigger">
            <summary>
            A base class to ease the implementation of <see cref="T:Caliburn.PresentationFramework.IMessageTrigger"/>.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.IMessageTrigger">
            <summary>
            Implementors enable various methods of triggering the sending of messages.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.IMessageTrigger.Attach(Caliburn.PresentationFramework.IInteractionNode)">
            <summary>
            Attaches the trigger to the interaction hierarchy.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.IMessageTrigger.UpdateAvailabilty(System.Boolean)">
            <summary>
            Updates the UI to reflect the availabilty of the trigger.
            </summary>
            <param name="isAvailable">if set to <c>true</c> [is available].</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.IMessageTrigger.Node">
            <summary>
            Gets the node within the interaction hierarchy that this trigger is a part of.
            </summary>
            <value>The node.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.IMessageTrigger.Message">
            <summary>
            Gets the message that this trigger will send.
            </summary>
            <value>The message.</value>
        </member>
        <member name="F:Caliburn.PresentationFramework.BaseMessageTrigger.MessageProperty">
            <summary>
            A dependency property used to store the message sent by the trigger.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.BaseMessageTrigger.Attach(Caliburn.PresentationFramework.IInteractionNode)">
            <summary>
            Wires the trigger into the interaction hierarchy.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.BaseMessageTrigger.UpdateAvailabilty(System.Boolean)">
            <summary>
            Updates the UI to reflect the availabilty of the trigger.
            </summary>
            <param name="isAvailable">if set to <c>true</c> [is available].</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.BaseMessageTrigger.Node">
            <summary>
            Gets the node within the interaction hierarchy that this trigger is a part of.
            </summary>
            <value>The node.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.BaseMessageTrigger.Message">
            <summary>
            Gets the action details that this trigger will send.
            </summary>
            <value>The action details.</value>
        </member>
        <member name="F:Caliburn.PresentationFramework.Triggers.AttachedEventMessageTrigger.RoutedEventProperty">
            <summary>
            A dependency property representing the routed event's value.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Triggers.AttachedEventMessageTrigger.Attach(Caliburn.PresentationFramework.IInteractionNode)">
            <summary>
            Wires the trigger into the interaction hierarchy.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Triggers.AttachedEventMessageTrigger.CreateInstanceCore">
            <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:System.Windows.Freezable"/> derived class.
            </summary>
            <returns>The new instance.</returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.Triggers.AttachedEventMessageTrigger.RoutedEvent">
            <summary>
            Gets or sets the routed event.
            </summary>
            <value>The routed event.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Triggers.CommandMessageTrigger">
            <summary>
            A message trigger that triggers from command execution of an ICommandSource.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Triggers.CommandMessageTrigger.CreateInstanceCore">
            <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:System.Windows.Freezable"/> derived class.
            </summary>
            <returns>The new instance.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Triggers.CommandMessageTrigger.Attach(Caliburn.PresentationFramework.IInteractionNode)">
            <summary>
            Wires the trigger into the interaction hierarchy.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Triggers.CommandMessageTrigger.UpdateAvailabilty(System.Boolean)">
            <summary>
            Updates the UI to reflect the availabilty of the trigger.
            </summary>
            <param name="isAvailable">if set to <c>true</c> [is available].</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Triggers.CommandMessageTrigger.System#Windows#Input#ICommand#Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Triggers.CommandMessageTrigger.System#Windows#Input#ICommand#CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <returns>
            true if this command can be executed; otherwise, false.
            </returns>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="E:Caliburn.PresentationFramework.Triggers.CommandMessageTrigger.System#Windows#Input#ICommand#CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.Triggers.EventMessageTrigger">
            <summary>
            A message trigger that triggers by standard CLR events.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Triggers.EventMessageTrigger.EventNameProperty">
            <summary>
            A dependency property representing the event name's value.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Triggers.EventMessageTrigger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Triggers.EventMessageTrigger"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Triggers.EventMessageTrigger.#ctor(Caliburn.Core.Invocation.IEventHandlerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Triggers.EventMessageTrigger"/> class.
            </summary>
            <param name="eventHandlerFactory">The event handler factory.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Triggers.EventMessageTrigger.Attach(Caliburn.PresentationFramework.IInteractionNode)">
            <summary>
            Wires the trigger into the interaction hierarchy.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Triggers.EventMessageTrigger.CreateInstanceCore">
            <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:System.Windows.Freezable"/> derived class.
            </summary>
            <returns>The new instance.</returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.Triggers.EventMessageTrigger.EventName">
            <summary>
            Gets or sets the name of the event.
            </summary>
            <value>The name of the event.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Triggers.GestureMessageTrigger">
            <summary>
            An implentation of <see cref="T:System.Windows.Input.InputGesture"/> that enables triggers based on an <see cref="T:Caliburn.PresentationFramework.IMessageTrigger"/>.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Triggers.GestureMessageTrigger.KeyProperty">
            <summary>
            A dependency property representing the key's value.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Triggers.GestureMessageTrigger.ModifiersProperty">
            <summary>
            A dependency property representing the modifier's value.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Triggers.GestureMessageTrigger.MouseActionProperty">
            <summary>
            A dependency property representing the mouse action's value.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Triggers.GestureMessageTrigger.Attach(Caliburn.PresentationFramework.IInteractionNode)">
            <summary>
            Wires the trigger into the interactin hierarchy.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Triggers.GestureMessageTrigger.UpdateAvailabilty(System.Boolean)">
            <summary>
            Updates the UI to reflect the availabilty of the trigger.
            </summary>
            <param name="isAvailable">if set to <c>true</c> [is available].</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Triggers.GestureMessageTrigger.CreateInstanceCore">
            <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:System.Windows.Freezable"/> derived class.
            </summary>
            <returns>The new instance.</returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.Triggers.GestureMessageTrigger.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Triggers.GestureMessageTrigger.Modifiers">
            <summary>
            Gets or sets the modifiers.
            </summary>
            <value>The modifiers.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.Triggers.GestureMessageTrigger.MouseAction">
            <summary>
            Gets or sets the mouse action.
            </summary>
            <value>The mouse action.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Triggers.GestureMessageTrigger.GestureCommand">
            <summary>
            Used to attach gestures.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Triggers.GestureMessageTrigger.GestureCommand.#ctor(System.Windows.Input.InputGesture)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Triggers.GestureMessageTrigger.GestureCommand"/> class.
            </summary>
            <param name="gesture">The gesture.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Triggers.GestureMessageTrigger.GestureCommand.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Caliburn.PresentationFramework.Triggers.GestureMessageTrigger.GestureCommand.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Triggers.GestureMessageTrigger.GestureCommand.op_Equality(Caliburn.PresentationFramework.Triggers.GestureMessageTrigger.GestureCommand,Caliburn.PresentationFramework.Triggers.GestureMessageTrigger.GestureCommand)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Triggers.GestureMessageTrigger.GestureCommand.op_Inequality(Caliburn.PresentationFramework.Triggers.GestureMessageTrigger.GestureCommand,Caliburn.PresentationFramework.Triggers.GestureMessageTrigger.GestureCommand)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Triggers.GestureMessageTrigger.GestureCommand.AddTrigger(Caliburn.PresentationFramework.Triggers.GestureMessageTrigger)">
            <summary>
            Adds the trigger.
            </summary>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Triggers.GestureMessageTrigger.GestureCommand.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Triggers.GestureMessageTrigger.GestureCommand.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
            <returns>
            true if this command can be executed; otherwise, false.
            </returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.Triggers.GestureMessageTrigger.GestureCommand.Gesture">
            <summary>
            Gets the gesture.
            </summary>
            <value>The gesture.</value>
        </member>
        <member name="E:Caliburn.PresentationFramework.Triggers.GestureMessageTrigger.GestureCommand.System#Windows#Input#ICommand#CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.ViewModels.Bind">
            <summary>
            Hosts dependency properties for binding.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.Bind.Initialize(Caliburn.PresentationFramework.ViewModels.IViewModelBinder)">
            <summary>
            Initializes the binder attached properties.
            </summary>
            <param name="binder">The binder.</param>
        </member>
        <member name="F:Caliburn.PresentationFramework.ViewModels.Bind.ModelProperty">
            <summary>
            Allows binding on an existing view.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.Bind.GetModel(System.Windows.DependencyObject)">
            <summary>
            Gets the model.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.Bind.SetModel(System.Windows.DependencyObject,System.Object)">
            <summary>
            Sets the model.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.ViewModels.BindableEnum">
            <summary>
            A databindable enum with a display name.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.BindableEnum.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.BindableEnum.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.BindableEnum.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.ViewModels.BindableEnum.UnderlyingValue">
            <summary>
            Gets or sets the underlying value.
            </summary>
            <value>The underlying value.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.ViewModels.BindableEnum.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.ViewModels.BindableEnum.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.ViewModels.BindableEnumCollection`1">
            <summary>
            A collection of <see cref="T:Caliburn.PresentationFramework.ViewModels.BindableEnum"/> based on an <see cref="T:System.Enum"/>.
            </summary>
            <typeparam name="T">The Enum type.</typeparam>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.BindableEnumCollection`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.ViewModels.BindableEnumCollection`1"/> class.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.BindableEnumCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.ViewModels.BindableEnumCollection`1"/> class.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.ViewModels.DefaultValidationError">
            <summary>
            The default implementation of <see cref="T:Caliburn.PresentationFramework.ViewModels.IValidationError"/>.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.ViewModels.IValidationError">
            <summary>
            Represents a validation error.
            </summary>
        </member>
        <member name="P:Caliburn.PresentationFramework.ViewModels.IValidationError.Instance">
            <summary>
            Gets the invalid instance.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.ViewModels.IValidationError.PropertyName">
            <summary>
            Gets the name of the invalid property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.ViewModels.IValidationError.Message">
            <summary>
            Gets the error message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.DefaultValidationError.#ctor(System.Object,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.ViewModels.DefaultValidationError"/> class.
            </summary>
            <param name="instance">The instance.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="message">The message.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.ViewModels.DefaultValidationError.Instance">
            <summary>
            Gets the invalid instance.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.ViewModels.DefaultValidationError.PropertyName">
            <summary>
            Gets the name of the invalid property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.ViewModels.DefaultValidationError.Message">
            <summary>
            Gets the error message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.ViewModels.DefaultValidator">
            <summary>
            The default implemenation of <see cref="T:Caliburn.PresentationFramework.ViewModels.IValidator"/>.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.ViewModels.IValidator">
            <summary>
            A service that validates the state of classes and their properties.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.IValidator.ShouldValidate(System.Reflection.PropertyInfo)">
            <summary>
            Inidcates whether the specified property should be validated.
            </summary>
            <param name="property">The property.</param>
            <returns>true if should be validated; otherwise false</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.IValidator.Validate(System.Object)">
            <summary>
            Validates the specified instance.
            </summary>
            <param name="instance">The instance.</param>
            <returns>The validation errors.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.IValidator.Validate(System.Object,System.String)">
            <summary>
            Validates the specified property on the instance.
            </summary>
            <param name="instance">The instance.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>The validation errors.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.DefaultValidator.ShouldValidate(System.Reflection.PropertyInfo)">
            <summary>
            Indicates whether the specified property should be validated.
            </summary>
            <param name="property">The property.</param>
            <returns>
            true if should be validated; otherwise false
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.DefaultValidator.Validate(System.Object)">
            <summary>
            Validates the specified instance.
            </summary>
            <param name="instance">The instance.</param>
            <returns>The validation errors.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.DefaultValidator.Validate(System.Object,System.String)">
            <summary>
            Validates the specified property on the instance.
            </summary>
            <param name="instance">The instance.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>The validation errors.</returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.ViewModels.DefaultViewLocator">
            <summary>
            The default implementation of <see cref="T:Caliburn.PresentationFramework.ViewModels.IViewLocator"/>.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.ViewModels.IViewLocator">
            <summary>
            A strategy for determining which view to use for a given model.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.IViewLocator.Locate(System.Type,System.Windows.DependencyObject,System.Object)">
            <summary>
            Locates the View for the specified model type.
            </summary>
            <param name="modelType">Type of the model.</param>
            <param name="displayLocation">The display location.</param>
            <param name="context">The context.</param>
            <returns>The view.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.DefaultViewLocator.#ctor(Caliburn.Core.IAssemblySource,Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.ViewModels.DefaultViewLocator"/> class.
            </summary>
            <param name="assemblySource">The assembly source.</param>
            <param name="serviceLocator">The service locator.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.DefaultViewLocator.AddNamespaceAlias(System.String,System.String)">
            <summary>
            Allows for the explicit mapping of a model's namespace to a view's namespace. This overrides the implicit mapping.
            </summary>
            <param name="modelNamespace">The namespace that the model resides in.</param>
            <param name="viewNamespace">the namespace that the view resides in.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.DefaultViewLocator.Locate(System.Type,System.Windows.DependencyObject,System.Object)">
            <summary>
            Locates the View for the specified model type.
            </summary>
            <param name="modelType">Type of the model.</param>
            <param name="displayLocation">The display location.</param>
            <param name="context">The context.</param>
            <returns>The view.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.DefaultViewLocator.DetermineCacheKey(System.Type,System.String)">
            <summary>
            Determines the cache key.
            </summary>
            <param name="modelType">Type of the model.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.DefaultViewLocator.GetOrCreateViewFromType(System.Type)">
            <summary>
            Queries the service locator for a view matching the type. If one is not found, it attempts to instantiate the type.
            If both options fail, it returns null.
            </summary>
            <param name="type">The candidate type for the view.</param>
            <returns>An instance of a view or null.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.DefaultViewLocator.GetTypeNamesToCheck(System.Type,System.String)">
            <summary>
            Gets the type names to check for view implementations.
            </summary>
            <param name="modelType">Type of the model.</param>
            <param name="context">Some additional context used to select the proper view.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.DefaultViewLocator.GetSingularKeywords">
            <summary>
            Gets the keywords used for namespace/type search and replace.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.DefaultViewLocator.ReplaceWithView(System.String,System.String)">
            <summary>
            Creates a set of possible type names based on the model type by replacing the toReplace text.
            </summary>
            <param name="part">The model name.</param>
            <param name="toReplace">To replace.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.DefaultViewLocator.MakeInterface(System.String)">
            <summary>
            Makes a type name into an interface name.
            </summary>
            <param name="part">The part.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.DefaultViewLocator.MakeNamespacePart(System.String)">
            <summary>
            Makes a type name part into a namespace part.
            </summary>
            <param name="part">The part.</param>
            <returns></returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.ViewModels.DefaultViewModelBinder">
            <summary>
            The default implementation of <see cref="T:Caliburn.PresentationFramework.ViewModels.IViewModelBinder"/>.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.ViewModels.IViewModelBinder">
            <summary>
            Implemented by services that bind a view to a view model.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.IViewModelBinder.Bind(System.Object,System.Windows.DependencyObject,System.Object,System.Boolean)">
            <summary>
            Binds the specified viewModel to the view.
            </summary>
            <param name="viewModel">The model.</param>
            <param name="view">The view.</param>
            <param name="context">The context.</param>
            <param name="useCachedConventions">Check the cache for conventions.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.ViewModels.IViewModelBinder.ApplyConventionsByDefault">
            <summary>
            Gets or sets a value indicating whether to apply conventions by default.
            </summary>
            <value>
            	<c>true</c> if conventions should be applied by default; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.DefaultViewModelBinder.#ctor(Caliburn.PresentationFramework.ViewModels.IViewModelDescriptionFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.ViewModels.DefaultViewModelBinder"/> class.
            </summary>
            <param name="viewModelDescriptionFactory"></param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.DefaultViewModelBinder.Bind(System.Object,System.Windows.DependencyObject,System.Object,System.Boolean)">
            <summary>
            Binds the specified viewModel to the view.
            </summary>
            <param name="viewModel">The model.</param>
            <param name="view">The view.</param>
            <param name="context">The context.</param>
            <param name="useCachedConventions">Check the cache for conventions.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.DefaultViewModelBinder.BindCore(System.Object,System.Windows.DependencyObject,System.Object)">
            <summary>
            Attaches the view model and the view.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="view">The view.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.DefaultViewModelBinder.ShouldApplyConventions(System.Object,System.Windows.DependencyObject,System.Object)">
            <summary>
            Indicates whether or not the conventions should be applied.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="view">The view.</param>
            <param name="context">The context.</param>
            <returns><c>true</c> if conventions should be applied; otherwise, <c>false</c></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.DefaultViewModelBinder.ApplyConventions(System.Object,System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Applies the conventions.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="view">The view.</param>
            <param name="useCachedConventions">Check cache for conventions.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.DefaultViewModelBinder.GetModelType(System.Object)">
            <summary>
            Gets the type of the view model.
            </summary>
            <param name="viewModel">The view model.</param>
            <returns></returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.ViewModels.DefaultViewModelBinder.ApplyConventionsByDefault">
            <summary>
            Gets or sets a value indicating whether to apply conventions by default.
            </summary>
            <value>
            	<c>true</c> if conventions should be applied by default; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Caliburn.PresentationFramework.ViewModels.DefaultViewModelDescription">
            <summary>
            The default implementation of <see cref="T:Caliburn.PresentationFramework.ViewModels.IViewModelDescription"/>.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.ViewModels.IViewModelDescription">
            <summary>
            Describes a View Model.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.IViewModelDescription.SetConventionsFor(System.Type,System.Collections.Generic.IEnumerable{Caliburn.PresentationFramework.ViewModels.IViewApplicable})">
            <summary>
            Sets the conventions for a particualr view type.
            </summary>
            <param name="viewType">Type of the view.</param>
            <param name="applicableConventions">The applicable conventions.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.IViewModelDescription.GetConventionsFor(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Gets the conventions for the specified view.
            </summary>
            <param name="view">The view.</param>
            <param name="useCache">Check cached conventions.</param>
            <returns>The applicable conventions.</returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.ViewModels.IViewModelDescription.Properties">
            <summary>
            Gets the properties.
            </summary>
            <value>The properties.</value>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.DefaultViewModelDescription.#ctor(Caliburn.PresentationFramework.Conventions.IConventionManager,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.ViewModels.DefaultViewModelDescription"/> class.
            </summary>
            <param name="conventionManager">The convention manager.</param>
            <param name="targetType">Type of the target.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.DefaultViewModelDescription.GetAction(Caliburn.PresentationFramework.Actions.ActionMessage)">
            <summary>
            Gets the action.
            </summary>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.DefaultViewModelDescription.AddAction(Caliburn.PresentationFramework.Actions.IAction)">
            <summary>
            Adds the action.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.DefaultViewModelDescription.SetConventionsFor(System.Type,System.Collections.Generic.IEnumerable{Caliburn.PresentationFramework.ViewModels.IViewApplicable})">
            <summary>
            Sets the conventions for a particualr view type.
            </summary>
            <param name="viewType">Type of the view.</param>
            <param name="applicableConventions">The applicable conventions.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.DefaultViewModelDescription.GetConventionsFor(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Gets the conventions for the specified view.
            </summary>
            <param name="view">The view.</param>
            <param name="useCachedConventions">Chech cache for conventions.</param>
            <returns>The applicable conventions.</returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.ViewModels.DefaultViewModelDescription.TargetType">
            <summary>
            Gets the View Model's type.
            </summary>
            <value>The type of the View Model.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.ViewModels.DefaultViewModelDescription.Filters">
            <summary>
            Gets the filters.
            </summary>
            <value>The filters.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.ViewModels.DefaultViewModelDescription.Actions">
            <summary>
            Gets the actions.
            </summary>
            <value>The actions.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.ViewModels.DefaultViewModelDescription.Properties">
            <summary>
            Gets the properties.
            </summary>
            <value>The properties.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.ViewModels.DefaultViewModelDescriptionFactory">
            <summary>
            The default implementation of <see cref="T:Caliburn.PresentationFramework.ViewModels.IViewModelDescriptionFactory"/>.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.ViewModels.IViewModelDescriptionFactory">
            <summary>
            A service responsible for creating instances of <see cref="T:Caliburn.PresentationFramework.ViewModels.IViewModelDescription"/>.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.IViewModelDescriptionFactory.Create(System.Type)">
            <summary>
            Creates a description based on the target type.
            </summary>
            <param name="targetType">Type of the target.</param>
            <returns>A view model description.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.DefaultViewModelDescriptionFactory.#ctor(Microsoft.Practices.ServiceLocation.IServiceLocator,Caliburn.PresentationFramework.Actions.IActionLocator,Caliburn.PresentationFramework.Conventions.IConventionManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.ViewModels.DefaultViewModelDescriptionFactory"/> class.
            </summary>
            <param name="serviceLocator">The service locator.</param>
            <param name="actionLocator">The action locator.</param>
            <param name="conventionManager">The convention manager.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.DefaultViewModelDescriptionFactory.Create(System.Type)">
            <summary>
            Creates a description based on the target type.
            </summary>
            <param name="targetType">Type of the target.</param>
            <returns>A view model description.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.DefaultViewModelDescriptionFactory.CreateCore(System.Type)">
            <summary>
            Creates the actual description.
            </summary>
            <param name="targetType">Type of the target.</param>
            <returns></returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.ViewModels.DefaultViewModelFactory">
            <summary>
            The default implementation of <see cref="T:Caliburn.PresentationFramework.ViewModels.IViewModelFactory"/>.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.ViewModels.IViewModelFactory">
            <summary>
            Implemented by services that create view models.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.IViewModelFactory.Create``1">
            <summary>
            Creates a view model.
            </summary>
            <typeparam name="T">The view model's type.</typeparam>
            <returns>The view model.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.IViewModelFactory.CreateFor``1(``0)">
            <summary>
            Creates a screen for the given subject.
            </summary>
            <typeparam name="T">The subject's type.</typeparam>
            <param name="subject">The subject.</param>
            <returns>The screen.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.DefaultViewModelFactory.#ctor(Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.ViewModels.DefaultViewModelFactory"/> class.
            </summary>
            <param name="serviceLocator">The service locator.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.DefaultViewModelFactory.Create``1">
            <summary>
            Creates a view model.
            </summary>
            <typeparam name="T">The view model's type.</typeparam>
            <returns>The view model.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.DefaultViewModelFactory.CreateFor``1(``0)">
            <summary>
            Creates a screen for the given subject.
            </summary>
            <typeparam name="T">The subject's type.</typeparam>
            <param name="subject">The subject.</param>
            <returns>The screen.</returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.ViewModels.IViewStrategy">
            <summary>
            An <see cref="T:Caliburn.PresentationFramework.ViewModels.IViewLocator"/> as <see cref="T:Caliburn.Core.Metadata.IMetadata"/> with conditional matching.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.IViewStrategy.Matches(System.Object)">
            <summary>
            Determines whether this strategy applies in the specified context.
            </summary>
            <param name="context">The context.</param>
            <returns>true if it matches the context; false otherwise</returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.ViewModels.View">
            <summary>
            Hosts attached properties related to view models.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.View.Initialize(Caliburn.PresentationFramework.ViewModels.IViewLocator,Caliburn.PresentationFramework.ViewModels.IViewModelBinder)">
            <summary>
            Initializes the framework with the specified view locator and view model binder.
            </summary>
            <param name="viewLocator">The view locator.</param>
            <param name="viewModelBinder">The view model binder.</param>
        </member>
        <member name="F:Caliburn.PresentationFramework.ViewModels.View.ContextProperty">
            <summary>
            A dependency property for assigning a context to a particular portion of the UI.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.View.GetContext(System.Windows.DependencyObject)">
            <summary>
            Gets the context.
            </summary>
            <param name="d">The d.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.View.SetContext(System.Windows.DependencyObject,System.Object)">
            <summary>
            Sets the context.
            </summary>
            <param name="d">The d.</param>
            <param name="value">The value.</param>
        </member>
        <member name="F:Caliburn.PresentationFramework.ViewModels.View.ModelProperty">
            <summary>
            A dependency property for attaching a model to the UI.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.View.GetModel(System.Windows.DependencyObject)">
            <summary>
            Gets the model.
            </summary>
            <param name="d">The d.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.View.SetModel(System.Windows.DependencyObject,System.Object)">
            <summary>
            Sets the model.
            </summary>
            <param name="d">The d.</param>
            <param name="value">The value.</param>
        </member>
        <member name="F:Caliburn.PresentationFramework.ViewModels.View.StrategyProperty">
            <summary>
            A dependency property for assigning an <see cref="T:Caliburn.PresentationFramework.ViewModels.IViewLocator"/> to a UI element.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.View.GetStrategy(System.Windows.DependencyObject)">
            <summary>
            Gets the <see cref="T:Caliburn.PresentationFramework.ViewModels.IViewLocator"/>.
            </summary>
            <param name="d">The d.</param>
            <returns>The strategy.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.View.SetStrategy(System.Windows.DependencyObject,Caliburn.PresentationFramework.ViewModels.IViewLocator)">
            <summary>
            Sets the <see cref="T:Caliburn.PresentationFramework.ViewModels.IViewLocator"/>.
            </summary>
            <param name="d">The d.</param>
            <param name="value">The value.</param>
        </member>
        <member name="F:Caliburn.PresentationFramework.ViewModels.View.ApplyConventionsProperty">
            <summary>
            A dependency property which allows the override of convention application behavior.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.View.GetApplyConventions(System.Windows.DependencyObject)">
            <summary>
            Gets the convention application behavior.
            </summary>
            <param name="d">The d.</param>
            <returns>The strategy.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.View.SetApplyConventions(System.Windows.DependencyObject,System.Nullable{System.Boolean})">
            <summary>
            Sets the convention application behavior.
            </summary>
            <param name="d">The d.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.ViewModels.ViewAttribute">
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.ViewModels.IViewLocator"/> that provides a basic lookup strategy for an attributed model.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.ViewAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.ViewModels.ViewAttribute"/> class.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.ViewAttribute.Matches(System.Object)">
            <summary>
            Determines whether this strategy applies in the specified context.
            </summary>
            <param name="context">The context.</param>
            <returns>
            true if it matches the context; false otherwise
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.ViewAttribute.Locate(System.Type,System.Windows.DependencyObject,System.Object)">
            <summary>
            Locates the View for the specified model type.
            </summary>
            <param name="modelType">Type of the model.</param>
            <param name="displayLocation">The display location.</param>
            <param name="context">The context.</param>
            <returns>The view.</returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.ViewModels.ViewAttribute.Key">
            <summary>
            Gets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.ViewModels.ViewAttribute.Context">
            <summary>
            Gets or sets the context.
            </summary>
            <value>The context.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.ViewModels.ViewModelExtensions">
            <summary>
            Hosts extension methods related to view model functionality.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.ViewModels.ViewModelExtensions.LocateImplementation">
            <summary>
            The overridable implementation of Locate.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ViewModels.ViewModelExtensions.Locate(Caliburn.PresentationFramework.ViewModels.IViewLocator,System.Object,System.Windows.DependencyObject,System.Object)">
            <summary>
            Gets the view for displaying the specified model.
            </summary>
            <param name="locator">The view locator.</param>
            <param name="model">The model.</param>
            <param name="displayLocation">The control into which the view will be injected.</param>
            <param name="context">Some additional context used to select the proper view.</param>
            <returns></returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.AvailabilityEffect">
            <summary>
            Common implementations of <see cref="T:Caliburn.PresentationFramework.IAvailabilityEffect"/>.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.AvailabilityEffect.None">
            <summary>
            The element is not affected by changes in availability.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.AvailabilityEffect.Disable">
            <summary>
            This effect can disable the UI.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.AvailabilityEffect.Hide">
            <summary>
            This effect can hide the UI.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.AvailabilityEffect.Collapse">
            <summary>
            This effect can collapse the UI.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.AvailabilityEffect.NoneEffect">
            <summary>
            The element is not affected by changes in availability.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.IAvailabilityEffect">
            <summary>
            Describes how a UI is affected by the availability of a message.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.IAvailabilityEffect.ApplyTo(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Applies the effect to the target.
            </summary>
            <param name="target">The element.</param>
            <param name="isAvailable">Determines how the effect will be applied to the target.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.AvailabilityEffect.NoneEffect.ApplyTo(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Applies the effect to the target.
            </summary>
            <param name="target">The element.</param>
            <param name="isAvailable">Determines how the effect will be applied to the target.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.AvailabilityEffect.DisableEffect">
            <summary>
            This effect can disable the UI.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.AvailabilityEffect.DisableEffect.ApplyTo(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Applies the effect to the target.
            </summary>
            <param name="target">The element.</param>
            <param name="isAvailable">Determines how the effect will be applied to the target.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.AvailabilityEffect.HideEffect">
            <summary>
            This effect can hide the UI.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.AvailabilityEffect.HideEffect.ApplyTo(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Applies the effect to the target.
            </summary>
            <param name="target">The element.</param>
            <param name="isAvailable">Determines how the effect will be applied to the target.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.AvailabilityEffect.CollapseEffect">
            <summary>
            This effect can collapse the UI.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.AvailabilityEffect.CollapseEffect.ApplyTo(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Applies the effect to the target.
            </summary>
            <param name="target">The element.</param>
            <param name="isAvailable">Determines how the effect will be applied to the target.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.AvailabilityEffectConverter">
            <summary>
            A <see cref="T:System.ComponentModel.TypeConverter"/> capable of converting strings to <see cref="T:Caliburn.PresentationFramework.IAvailabilityEffect"/> instances.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.AvailabilityEffectConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.AvailabilityEffectConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="T:Caliburn.PresentationFramework.DefaultMessageBinder">
            <summary>
            The default implementation of <see cref="T:Caliburn.PresentationFramework.IMessageBinder"/>.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.IMessageBinder">
            <summary>
            A service that is capable of properly binding values to a methods parameters and return.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.IMessageBinder.IsSpecialValue(System.String)">
            <summary>
            Determines whether the supplied value is recognized as a specialy treated value.
            </summary>
            <param name="potential">The potential value.</param>
            <returns>
            	<c>true</c> if a special value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.IMessageBinder.AddValueHandler(System.String,System.Func{Caliburn.PresentationFramework.IInteractionNode,System.Object,System.Object})">
            <summary>
            Identifies a special value along with its handler.
            </summary>
            <param name="specialValue">The special value.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.IMessageBinder.DetermineParameters(Caliburn.PresentationFramework.IRoutedMessage,System.Collections.Generic.IList{Caliburn.PresentationFramework.RequiredParameter},Caliburn.PresentationFramework.IInteractionNode,System.Object)">
            <summary>
            Determines the parameters that a method should be invoked with.
            </summary>
            <param name="message">The message to determine the parameters for.</param>
            <param name="requiredParameters">The requirements for method binding.</param>
            <param name="handlingNode">The handling node.</param>
            <param name="context">The context.</param>
            <returns>The actual parameters</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.IMessageBinder.CreateResult(Caliburn.PresentationFramework.MessageProcessingOutcome)">
            <summary>
            Creates a result from the message outcome.
            </summary>
            <param name="outcome">The outcome of processing the message.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.DefaultMessageBinder.#ctor(Caliburn.PresentationFramework.Conventions.IConventionManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.DefaultMessageBinder"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.DefaultMessageBinder.IsSpecialValue(System.String)">
            <summary>
            Determines whether the supplied value is recognized as a specialy treated value.
            </summary>
            <param name="potential">The potential value.</param>
            <returns>
            	<c>true</c> if a special value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.DefaultMessageBinder.AddValueHandler(System.String,System.Func{Caliburn.PresentationFramework.IInteractionNode,System.Object,System.Object})">
            <summary>
            Identifies a special value along with its handler.
            </summary>
            <param name="specialValue">The special value.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.DefaultMessageBinder.DetermineParameters(Caliburn.PresentationFramework.IRoutedMessage,System.Collections.Generic.IList{Caliburn.PresentationFramework.RequiredParameter},Caliburn.PresentationFramework.IInteractionNode,System.Object)">
            <summary>
            Determines the parameters that a method should be invoked with.
            </summary>
            <param name="message">The message to determine the parameters for.</param>
            <param name="requiredParameters">The requirements for method binding.</param>
            <param name="handlingNode">The handling node.</param>
            <param name="context">The context.</param>
            <returns>The actual parameters</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.DefaultMessageBinder.CreateResult(Caliburn.PresentationFramework.MessageProcessingOutcome)">
            <summary>
            Binds the return value to the UI.
            </summary>
            <param name="outcome">The outcome or processing the message.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.DefaultMessageBinder.LocateAndCoerceValues(System.Collections.Generic.IList{Caliburn.PresentationFramework.RequiredParameter},Caliburn.PresentationFramework.IInteractionNode,Caliburn.PresentationFramework.IInteractionNode,System.Object)">
            <summary>
            Locates and perofrms type coercion for the required parameters.
            </summary>
            <param name="requiredParameters">The required parameters.</param>
            <param name="sourceNode">The source node.</param>
            <param name="handlingNode">The handling node.</param>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.DefaultMessageBinder.CoerceValues(System.Collections.Generic.IList{Caliburn.PresentationFramework.RequiredParameter},System.Object[],Caliburn.PresentationFramework.IInteractionNode,System.Object)">
            <summary>
            Coerces the values.
            </summary>
            <param name="requiredParameters">The required parameters.</param>
            <param name="providedValues">The provided values.</param>
            <param name="sourceNode">The source node.</param>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.DefaultMessageBinder.DetermineSpecialValue(System.String,Caliburn.PresentationFramework.IInteractionNode,System.Object,System.Object@)">
            <summary>
            Determines if the key is a special value.
            </summary>
            <param name="possibleKey">The possible key.</param>
            <param name="sourceNode">The source node.</param>
            <param name="context">The context.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.DefaultMessageBinder.ResolveSpecialValue(System.String,Caliburn.PresentationFramework.IInteractionNode,System.Object)">
            <summary>
            Resolves the special value.
            </summary>
            <param name="potential">The possible special value.</param>
            <param name="sourceNode">The source node.</param>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.DefaultMessageBinder.CoerceParameter(Caliburn.PresentationFramework.RequiredParameter,System.Object)">
            <summary>
            Coerces the parameter.
            </summary>
            <param name="parameter">The required parameter.</param>
            <param name="providedValue">The provided value.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.DefaultMessageBinder.CoerceValueCore(System.Type,System.Object)">
            <summary>
            Coerces the provided value to the destination type.
            </summary>
            <param name="destinationType">The destination type.</param>
            <param name="providedValue">The provided value.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.DefaultMessageBinder.GetDefaultValue(System.Type)">
            <summary>
            Gets the default value for a type.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.DefaultMessageBinder.InitializeDefaultValueHandlers">
            <summary>
            Creates the default value handlers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.DefaultMessageBinder.CreateGetter(System.Object,System.String[])">
            <summary>
            Finds the property setter.
            </summary>
            <param name="target">The target.</param>
            <param name="propertyPath">The property path.</param>
            <returns></returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.IResult">
            <summary>
            Allows custom code to execute after the return of a method.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.IResult.Execute(Caliburn.PresentationFramework.ResultExecutionContext)">
            <summary>
            Executes the result within the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="E:Caliburn.PresentationFramework.IResult.Completed">
            <summary>
            Occurs when execution has completed.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.DefaultResult">
            <summary>
            The default behavior for handling return values of bound methods.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.DefaultResult.#ctor(Caliburn.PresentationFramework.Conventions.IConventionManager,Caliburn.PresentationFramework.MessageProcessingOutcome)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.DefaultResult"/> class.
            </summary>
            <param name="conventionManager">The convention manager.</param>
            <param name="outcome">The outcome of processing the message.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.DefaultResult.Execute(Caliburn.PresentationFramework.ResultExecutionContext)">
            <summary>
            Executes the result within the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.DefaultResult.CreateSetter(System.Object,System.String[])">
            <summary>
            Finds the property setter.
            </summary>
            <param name="target">The target.</param>
            <param name="propertyPath">The property path.</param>
            <returns></returns>
        </member>
        <member name="E:Caliburn.PresentationFramework.DefaultResult.Completed">
            <summary>
            Occurs when execution has completed.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.DefaultRoutedMessageController">
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.IRoutedMessageController"/>.
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.IRoutedMessageController">
            <summary>
            A service that manages all aspects of Caliburn's routed message mechanism.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.IRoutedMessageController.AddHandler(System.Windows.DependencyObject,Caliburn.PresentationFramework.IRoutedMessageHandler,System.Boolean)">
            <summary>
            Adds a message handler at the specified location in the UI hierarchy.
            </summary>
            <param name="uiElement">The UI element.</param>
            <param name="handler">The message handler.</param>
            <param name="setContext">if set to <c>true</c> the handler will also be stored in the element's DataContext.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.IRoutedMessageController.AttachTrigger(System.Windows.DependencyObject,Caliburn.PresentationFramework.IMessageTrigger)">
            <summary>
            Attaches the trigger to the UI and prepares it to send messages.
            </summary>
            <param name="uiElement">The UI element.</param>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.IRoutedMessageController.GetParent(System.Windows.DependencyObject)">
            <summary>
            Gets the parent.
            </summary>
            <param name="uiElement">The UI element to retrieve the parent for.</param>
            <returns></returns>
        </member>
        <member name="F:Caliburn.PresentationFramework.DefaultRoutedMessageController.NodeProperty">
            <summary>
            Used to maintain the state of the interaction hierarchy.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.DefaultRoutedMessageController.AddHandler(System.Windows.DependencyObject,Caliburn.PresentationFramework.IRoutedMessageHandler,System.Boolean)">
            <summary>
            Adds a message handler at the specified location in the UI hierarchy.
            </summary>
            <param name="uiElement">The UI element.</param>
            <param name="handler">The message handler.</param>
            <param name="setContext">if set to <c>true</c> the handler will also be stored in the element's DataContext and ViewMetadata will be set.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.DefaultRoutedMessageController.AttachTrigger(System.Windows.DependencyObject,Caliburn.PresentationFramework.IMessageTrigger)">
            <summary>
            Attaches the trigger and prepares it to send actions.
            </summary>
            <param name="uiElement">The UI element.</param>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.DefaultRoutedMessageController.GetParent(System.Windows.DependencyObject)">
            <summary>
            Gets the parent.
            </summary>
            <param name="uiElement">The UI element to retrieve the parent for.</param>
            <returns></returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.ElementExtensions">
            <summary>
            Hosts extension methods related to FrameworkElements and FrameworkContentElements.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Caliburn.PresentationFramework.ElementExtensions.GetParent(System.Windows.DependencyObject)" -->
        <member name="M:Caliburn.PresentationFramework.ElementExtensions.SetDataContext(System.Windows.DependencyObject,System.Object)">
            <summary>
            Sets the data context of the dependency object.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="dataContext">The data context value.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ElementExtensions.GetDataContext(System.Windows.DependencyObject)">
            <summary>
            Gets the data context of the depdendency object.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <returns>The data context value.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ElementExtensions.OnLoad(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
            <summary>
            Wires the delegate to the Loaded event of the element.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ElementExtensions.SetBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Windows.Data.Binding)">
            <summary>
            Sets the binding on the dependency object.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="dependencyProperty">The dependency property.</param>
            <param name="binding">The binding.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ElementExtensions.FindName(System.Windows.DependencyObject,System.String)">
            <summary>
            Finds a child element by name.
            </summary>
            <param name="parent">The parent.</param>
            <param name="name">The name.</param>
            <returns>The found element.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ElementExtensions.FindNameExhaustive``1(System.Windows.DependencyObject,System.String,System.Boolean)">
            <summary>
            Finds an element by name or fails.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="element">The element.</param>
            <param name="name">The name.</param>
            <param name="shouldFail">Indicates whether an exception should be throw if the named item is not found.</param>
            <returns>The found element.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ElementExtensions.GetName(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the Name property of this instance.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <returns>The name.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ElementExtensions.GetResource``1(System.Windows.DependencyObject,System.Object)">
            <summary>
            Gets the resource by searching the hierarchy of of elements.
            </summary>
            <typeparam name="T">The type of resource.</typeparam>
            <param name="element">The element.</param>
            <param name="key">The key.</param>
            <returns>The resource.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.ElementExtensions.Bind(Caliburn.PresentationFramework.Parameter,System.Windows.DependencyObject,System.String,System.String)">
            <summary>
            Binds the specified parameter to an element's property without using databinding.
            Rather, event name conventions are used to wire to property changes and push updates to the parameter value.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="element">The element.</param>
            <param name="elementName">Name of the element.</param>
            <param name="path">The path.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.EnumerableResults">
            <summary>
            Hosts extension methods and method overrides for execution of <see cref="T:Caliburn.PresentationFramework.IResult"/> and <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.EnumerableResults.ExecuteEnumerableResultCore">
            <summary>
            Executes an <see cref="T:System.Collections.Generic.IEnumerable`1"/>, optionally looking up the <see cref="T:Caliburn.PresentationFramework.IInteractionNode"/>.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.EnumerableResults.ExecuteResultCore">
            <summary>
            Executes an <see cref="T:Caliburn.PresentationFramework.IResult"/>, optionally looking up the <see cref="T:Caliburn.PresentationFramework.IInteractionNode"/>.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.EnumerableResults.GetInteractionNodeFromView">
            <summary>
            Get the <see cref="T:Caliburn.PresentationFramework.IInteractionNode"/> associated with the view.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.EnumerableResults.GetViewInstanceFromModel">
            <summary>
            Gets the view instance associated with the model.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.EnumerableResults.Execute(Caliburn.PresentationFramework.IResult)">
            <summary>
            Executes the specified result.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.EnumerableResults.Execute(System.Collections.Generic.IEnumerable{Caliburn.PresentationFramework.IResult})">
            <summary>
            Executes the specified results.
            </summary>
            <param name="results">The results.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.EnumerableResults.ExecuteFor(Caliburn.PresentationFramework.IResult,System.Object)">
            <summary>
            Executes the result for the model.
            </summary>
            <param name="result">The result.</param>
            <param name="model">The model.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.EnumerableResults.ExecuteFor(System.Collections.Generic.IEnumerable{Caliburn.PresentationFramework.IResult},System.Object)">
            <summary>
            Executes the results for the model.
            </summary>
            <param name="results">The results.</param>
            <param name="model">The model.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.EnumerableResults.ExecuteFor(Caliburn.PresentationFramework.IResult,System.Object,System.Object)">
            <summary>
            Executes the result for the model within the given context.
            </summary>
            <param name="result">The result.</param>
            <param name="model">The model.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.EnumerableResults.ExecuteFor(System.Collections.Generic.IEnumerable{Caliburn.PresentationFramework.IResult},System.Object,System.Object)">
            <summary>
            Executes the results for the model within the given context.
            </summary>
            <param name="results">The results.</param>
            <param name="model">The model.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Caliburn.PresentationFramework.IInteractionNode">
            <summary>
            Represents a node within the interaction hierarchy.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.IInteractionNode.FindParent">
            <summary>
            Finds the parent of this node.
            </summary>
            <returns>The parent or null if not found.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.IInteractionNode.Handles(Caliburn.PresentationFramework.IRoutedMessage)">
            <summary>
            Determines whether this node can handle the specified message.
            </summary>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.IInteractionNode.ProcessMessage(Caliburn.PresentationFramework.IRoutedMessage,System.Object)">
            <summary>
            Processes the message.
            </summary>
            <param name="message">The message.</param>
            <param name="context">An object that provides additional context for message processing.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.IInteractionNode.UpdateAvailability(Caliburn.PresentationFramework.IMessageTrigger)">
            <summary>
            Updates the availability of the trigger.
            </summary>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.IInteractionNode.RegisterHandler(Caliburn.PresentationFramework.IRoutedMessageHandler)">
            <summary>
            Sets the message handler for this node.
            </summary>
            <param name="messageHandler">The message handler.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.IInteractionNode.AddTrigger(Caliburn.PresentationFramework.IMessageTrigger)">
            <summary>
            Adds the trigger.
            </summary>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.IInteractionNode.MessageHandler">
            <summary>
            Gets the message target.
            </summary>
            <value>The action target.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.IInteractionNode.Triggers">
            <summary>
            Gets the triggers.
            </summary>
            <value>The triggers.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.IInteractionNode.UIElement">
            <summary>
            Gets the UI element.
            </summary>
            <value>The UI element.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.InteractionNode">
            <summary>
            Represents a node within the interaction hierarchy.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.InteractionNode.#ctor(System.Windows.DependencyObject,Caliburn.PresentationFramework.IRoutedMessageController)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.InteractionNode"/> class.
            </summary>
            <param name="uiElement">The UI element.</param>
            <param name="controller">The routed message controller.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.InteractionNode.FindParent">
            <summary>
            Finds the parent of this node.
            </summary>
            <returns>The parent or null if not found.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.InteractionNode.Handles(Caliburn.PresentationFramework.IRoutedMessage)">
            <summary>
            Determines whether this node can handle the specified message.
            </summary>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.InteractionNode.ProcessMessage(Caliburn.PresentationFramework.IRoutedMessage,System.Object)">
            <summary>
            Processes the message.
            </summary>
            <param name="message">The message.</param>
            <param name="context">An object that provides additional context for message processing.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.InteractionNode.UpdateAvailability(Caliburn.PresentationFramework.IMessageTrigger)">
            <summary>
            Updates the availability of the trigger.
            </summary>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.InteractionNode.RegisterHandler(Caliburn.PresentationFramework.IRoutedMessageHandler)">
            <summary>
            Sets the message handler for this node.
            </summary>
            <param name="messageHandler">The message handler.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.InteractionNode.AddTrigger(Caliburn.PresentationFramework.IMessageTrigger)">
            <summary>
            Adds the trigger.
            </summary>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.InteractionNode.MessageHandler">
            <summary>
            Gets the action target.
            </summary>
            <value>The action target.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.InteractionNode.Triggers">
            <summary>
            Gets the triggers.
            </summary>
            <value>The triggers.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.InteractionNode.UIElement">
            <summary>
            Gets the UI element.
            </summary>
            <value>The UI element.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Message">
            <summary>
            Hosts attached properties related to routed UI messaging.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Message.TriggersProperty">
            <summary>
            A property definition representing a collection of triggers.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Message.AttachProperty">
            <summary>
            A property definition representing a single trigger/message attachment.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Message.AvailabilityEffectProperty">
            <summary>
            A property representing the availability effect of a given message.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Message.Initialize(Caliburn.PresentationFramework.IRoutedMessageController,Caliburn.PresentationFramework.Parsers.IParser)">
            <summary>
            Initializes the message property host.
            </summary>
            <param name="controller">The controller.</param>
            <param name="parser">The parser.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Message.SetTriggers(System.Windows.DependencyObject,Caliburn.PresentationFramework.RoutedMessageTriggerCollection)">
            <summary>
            Sets the triggers.
            </summary>
            <param name="d">The d.</param>
            <param name="triggers">The triggers.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Message.GetTriggers(System.Windows.DependencyObject)">
            <summary>
            Gets the triggers.
            </summary>
            <param name="d">The d.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Message.SetAttach(System.Windows.DependencyObject,System.String)">
            <summary>
            Sets the attached trigger/message.
            </summary>
            <param name="d">The d.</param>
            <param name="attachText">The attach text.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Message.GetAttach(System.Windows.DependencyObject)">
            <summary>
            Gets the attached trigger/message.
            </summary>
            <param name="d">The d.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Message.SetAvailabilityEffect(System.Windows.DependencyObject,Caliburn.PresentationFramework.IAvailabilityEffect)">
            <summary>
            Sets the availability effect.
            </summary>
            <param name="d">The d.</param>
            <param name="effect">The effect.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Message.GetAvailabilityEffect(System.Windows.DependencyObject)">
            <summary>
            Gets the availability effect.
            </summary>
            <param name="d">The d.</param>
            <returns></returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.MessageProcessingOutcome">
            <summary>
            The outcome of processing a message.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.MessageProcessingOutcome.#ctor(System.Object,System.Type,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.MessageProcessingOutcome"/> class.
            </summary>
            <param name="result">The result.</param>
            <param name="resultType">Type of the result.</param>
            <param name="wasCancelled">if set to <c>true</c> [was cancelled].</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.MessageProcessingOutcome.WasCancelled">
            <summary>
            Gets or sets a value indicating whether message processing was cancelled.
            </summary>
            <value><c>true</c> if cancelled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.MessageProcessingOutcome.ResultType">
            <summary>
            Gets or sets the type of the result.
            </summary>
            <value>The type of the result.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.MessageProcessingOutcome.Result">
            <summary>
            Gets or sets the result.
            </summary>
            <value>The result.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.Parameter">
            <summary>
            Represents a parameter of a message.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.Parameter.ValueProperty">
            <summary>
            A dependency property representing the parameter's value.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Parameter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Parameter"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.Parameter.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.Parameter"/> class.
            </summary>
            <param name="value">The value of the parameter.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.Parameter.CreateInstanceCore">
            <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:System.Windows.Freezable"/> derived class.
            </summary>
            <returns>The new instance.</returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.Parameter.Wire(System.Object,System.Reflection.EventInfo,System.Func{System.Object})">
            <summary>
            Wires the parameter for value updates.
            </summary>
            <param name="source">The source.</param>
            <param name="eventInfo">The event info.</param>
            <param name="updater">The updater.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.Parameter.Value">
            <summary>
            Gets or sets the value of the parameter.
            </summary>
            <value>The value.</value>
        </member>
        <member name="E:Caliburn.PresentationFramework.Parameter.ValueChanged">
            <summary>
            Occurs when [value changed].
            </summary>
        </member>
        <member name="T:Caliburn.PresentationFramework.PresentationFrameworkExtensions">
            <summary>
            Extension methods related to the PresentationFramework classes.
            </summary>
        </member>
        <member name="F:Caliburn.PresentationFramework.PresentationFrameworkExtensions.GetModelTypeImplementation">
            <summary>
            The overridable implemenation of GetModelType.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.PresentationFrameworkExtensions.GetModelType(System.Object)">
            <summary>
            Gets the type of the model.
            </summary>
            <param name="model">The model.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.PresentationFramework.PresentationFrameworkExtensions.PresentationFramework(Caliburn.Core.Configuration.IModuleHook)">
            <summary>
            Adds the presentation framework module's configuration to the system.
            </summary>
            <param name="hook">The hook.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.PresentationFrameworkExtensions.SafeToString(System.Object)">
            <summary>
            Safely converts an object to a string.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The converted string or null, if the value was null.</returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.RequiredParameter">
            <summary>
            Represents a parameter that is required for message binding.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.RequiredParameter.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.RequiredParameter"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.RequiredParameter.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.RequiredParameter.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.ResolveExtension">
            <summary>
            A Markup Extension that enables type resolution through the DI container in XAML.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ResolveExtension.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.ResolveExtension"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ResolveExtension.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.ResolveExtension"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.ResolveExtension.ProvideValue(System.IServiceProvider)">
            <summary>
            When implemented in a derived class, returns an object that is set as the value of the target property for this markup extension.
            </summary>
            <param name="serviceProvider">Object that can provide services for the markup extension.</param>
            <returns>
            The object value to set on the property where the extension is applied.
            </returns>
        </member>
        <member name="P:Caliburn.PresentationFramework.ResolveExtension.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.ResolveExtension.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.ResolveExtension.DesignTimeValue">
            <summary>
            Gets or sets the design time value.
            </summary>
            <value>The design time value.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.ResultCompletionEventArgs">
            <summary>
            The event args for the Completed event of an <see cref="T:Caliburn.PresentationFramework.IResult"/>.
            </summary>
        </member>
        <member name="P:Caliburn.PresentationFramework.ResultCompletionEventArgs.Error">
            <summary>
            Gets or sets the error if one occurred.
            </summary>
            <value>The error.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.ResultCompletionEventArgs.WasCancelled">
            <summary>
            Gets or sets a value indicating whether the result was cancelled.
            </summary>
            <value><c>true</c> if cancelled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.ResultExecutionContext">
            <summary>
            The context in which a result executes.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.ResultExecutionContext.#ctor(Microsoft.Practices.ServiceLocation.IServiceLocator,Caliburn.PresentationFramework.IRoutedMessageWithOutcome,Caliburn.PresentationFramework.IInteractionNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.ResultExecutionContext"/> class.
            </summary>
            <param name="serviceLocator">The service locator.</param>
            <param name="message">The message.</param>
            <param name="handlingNode">The handling node.</param>
        </member>
        <member name="P:Caliburn.PresentationFramework.ResultExecutionContext.Message">
            <summary>
            Gets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.ResultExecutionContext.HandlingNode">
            <summary>
            Gets the handling node.
            </summary>
            <value>The handling node.</value>
        </member>
        <member name="P:Caliburn.PresentationFramework.ResultExecutionContext.ServiceLocator">
            <summary>
            Gets the service locator.
            </summary>
            <value>The service locator.</value>
        </member>
        <member name="T:Caliburn.PresentationFramework.RoutedMessageTriggerCollection">
            <summary>
            A collection of triggers for routing messages through the UI.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.RoutedMessageTriggerCollection.CreateInstanceCore">
            <summary>
            Creates a new instance of the <see cref="T:System.Windows.FreezableCollection`1"/>.
            </summary>
            <returns>The new instance.</returns>
        </member>
        <member name="T:Caliburn.PresentationFramework.SequentialResult">
            <summary>
            An implementation of <see cref="T:Caliburn.PresentationFramework.IResult"/> that enables execution of multiple results.
            </summary>
        </member>
        <member name="M:Caliburn.PresentationFramework.SequentialResult.#ctor(System.Collections.Generic.IEnumerable{Caliburn.PresentationFramework.IResult})">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.PresentationFramework.SequentialResult"/> class.
            </summary>
            <param name="children">The children.</param>
        </member>
        <member name="M:Caliburn.PresentationFramework.SequentialResult.Execute(Caliburn.PresentationFramework.ResultExecutionContext)">
            <summary>
            Executes the result within the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="E:Caliburn.PresentationFramework.SequentialResult.Completed">
            <summary>
            Occurs when execution has completed.
            </summary>
        </member>
        <member name="P:Caliburn.PresentationFramework.SequentialResult.Children">
            <summary>
            Gets the children.
            </summary>
            <value>The children.</value>
        </member>
    </members>
</doc>
